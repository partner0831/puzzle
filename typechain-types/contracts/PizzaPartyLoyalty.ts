/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyLoyalty {
  export type LoyaltyTierStruct = {
    name: string;
    minPoints: BigNumberish;
    maxPoints: BigNumberish;
    rewardMultiplier: BigNumberish;
    bonusRewards: BigNumberish;
    isActive: boolean;
  };

  export type LoyaltyTierStructOutput = [
    name: string,
    minPoints: bigint,
    maxPoints: bigint,
    rewardMultiplier: bigint,
    bonusRewards: bigint,
    isActive: boolean
  ] & {
    name: string;
    minPoints: bigint;
    maxPoints: bigint;
    rewardMultiplier: bigint;
    bonusRewards: bigint;
    isActive: boolean;
  };

  export type UserLoyaltyDataStruct = {
    totalPoints: BigNumberish;
    currentTier: BigNumberish;
    pointsEarned: BigNumberish;
    pointsRedeemed: BigNumberish;
    lastActivity: BigNumberish;
    streakDays: BigNumberish;
    totalRewards: BigNumberish;
    isActive: boolean;
  };

  export type UserLoyaltyDataStructOutput = [
    totalPoints: bigint,
    currentTier: bigint,
    pointsEarned: bigint,
    pointsRedeemed: bigint,
    lastActivity: bigint,
    streakDays: bigint,
    totalRewards: bigint,
    isActive: boolean
  ] & {
    totalPoints: bigint;
    currentTier: bigint;
    pointsEarned: bigint;
    pointsRedeemed: bigint;
    lastActivity: bigint;
    streakDays: bigint;
    totalRewards: bigint;
    isActive: boolean;
  };

  export type PointTransactionStruct = {
    timestamp: BigNumberish;
    points: BigNumberish;
    reason: string;
    isEarned: boolean;
    tierAtTime: BigNumberish;
  };

  export type PointTransactionStructOutput = [
    timestamp: bigint,
    points: bigint,
    reason: string,
    isEarned: boolean,
    tierAtTime: bigint
  ] & {
    timestamp: bigint;
    points: bigint;
    reason: string;
    isEarned: boolean;
    tierAtTime: bigint;
  };
}

export interface PizzaPartyLoyaltyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_STREAK_DAYS"
      | "POINTS_PER_DOLLAR"
      | "POINTS_PER_ENTRY"
      | "POINT_EXPIRY_DAYS"
      | "STREAK_BONUS"
      | "activeUsers"
      | "awardEntryPoints"
      | "awardLoyaltyPoints"
      | "awardSpendingPoints"
      | "blacklistedUsers"
      | "calculateRewardAmount"
      | "createLoyaltyTier"
      | "emergencyPause"
      | "emergencyWithdraw"
      | "getLoyaltyTier"
      | "getUserLoyaltyData"
      | "getUserTransactions"
      | "loyaltyTiers"
      | "owner"
      | "paused"
      | "redeemPoints"
      | "renounceOwnership"
      | "setUserBlacklist"
      | "tierCount"
      | "totalPointsIssued"
      | "totalPointsRedeemed"
      | "totalUsers"
      | "transferOwnership"
      | "updateLoyaltyTier"
      | "userLoyaltyData"
      | "userTransactions"
      | "vmfToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LoyaltyTierUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PointsEarned"
      | "PointsRedeemed"
      | "StreakUpdated"
      | "TierCreated"
      | "Unpaused"
      | "UserBlacklisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_STREAK_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_DOLLAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_ENTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINT_EXPIRY_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardEntryPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "awardLoyaltyPoints",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "awardSpendingPoints",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoyaltyTier",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoyaltyTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoyaltyData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "tierCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPointsIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPointsRedeemed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLoyaltyTier",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userLoyaltyData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTransactions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_STREAK_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_DOLLAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_ENTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINT_EXPIRY_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardEntryPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardSpendingPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoyaltyTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoyaltyTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoyaltyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tierCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPointsIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPointsRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLoyaltyTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLoyaltyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
}

export namespace LoyaltyTierUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldTier: BigNumberish,
    newTier: BigNumberish,
    tierName: string
  ];
  export type OutputTuple = [
    user: string,
    oldTier: bigint,
    newTier: bigint,
    tierName: string
  ];
  export interface OutputObject {
    user: string;
    oldTier: bigint;
    newTier: bigint;
    tierName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsEarnedEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    reason: string,
    newTotal: BigNumberish,
    tier: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    points: bigint,
    reason: string,
    newTotal: bigint,
    tier: bigint
  ];
  export interface OutputObject {
    user: string;
    points: bigint;
    reason: string;
    newTotal: bigint;
    tier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsRedeemedEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    rewardAmount: BigNumberish,
    newTotal: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    points: bigint,
    rewardAmount: bigint,
    newTotal: bigint
  ];
  export interface OutputObject {
    user: string;
    points: bigint;
    rewardAmount: bigint;
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreakUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldStreak: BigNumberish,
    newStreak: BigNumberish,
    bonusPoints: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    oldStreak: bigint,
    newStreak: bigint,
    bonusPoints: bigint
  ];
  export interface OutputObject {
    user: string;
    oldStreak: bigint;
    newStreak: bigint;
    bonusPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierCreatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    name: string,
    minPoints: BigNumberish,
    maxPoints: BigNumberish,
    rewardMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    tierId: bigint,
    name: string,
    minPoints: bigint,
    maxPoints: bigint,
    rewardMultiplier: bigint
  ];
  export interface OutputObject {
    tierId: bigint;
    name: string;
    minPoints: bigint;
    maxPoints: bigint;
    rewardMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlacklistedEvent {
  export type InputTuple = [user: AddressLike, blacklisted: boolean];
  export type OutputTuple = [user: string, blacklisted: boolean];
  export interface OutputObject {
    user: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyLoyalty extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyLoyalty;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyLoyaltyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_STREAK_DAYS: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_DOLLAR: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_ENTRY: TypedContractMethod<[], [bigint], "view">;

  POINT_EXPIRY_DAYS: TypedContractMethod<[], [bigint], "view">;

  STREAK_BONUS: TypedContractMethod<[], [bigint], "view">;

  activeUsers: TypedContractMethod<[], [bigint], "view">;

  awardEntryPoints: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  awardLoyaltyPoints: TypedContractMethod<
    [user: AddressLike, points: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  awardSpendingPoints: TypedContractMethod<
    [user: AddressLike, vmfAmount: BigNumberish, vmfPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  blacklistedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  calculateRewardAmount: TypedContractMethod<
    [user: AddressLike, points: BigNumberish],
    [bigint],
    "view"
  >;

  createLoyaltyTier: TypedContractMethod<
    [
      name: string,
      minPoints: BigNumberish,
      maxPoints: BigNumberish,
      rewardMultiplier: BigNumberish,
      bonusRewards: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getLoyaltyTier: TypedContractMethod<
    [tierId: BigNumberish],
    [PizzaPartyLoyalty.LoyaltyTierStructOutput],
    "view"
  >;

  getUserLoyaltyData: TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyLoyalty.UserLoyaltyDataStructOutput],
    "view"
  >;

  getUserTransactions: TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyLoyalty.PointTransactionStructOutput[]],
    "view"
  >;

  loyaltyTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        minPoints: bigint;
        maxPoints: bigint;
        rewardMultiplier: bigint;
        bonusRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  redeemPoints: TypedContractMethod<
    [points: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setUserBlacklist: TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  tierCount: TypedContractMethod<[], [bigint], "view">;

  totalPointsIssued: TypedContractMethod<[], [bigint], "view">;

  totalPointsRedeemed: TypedContractMethod<[], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLoyaltyTier: TypedContractMethod<
    [
      tierId: BigNumberish,
      name: string,
      minPoints: BigNumberish,
      maxPoints: BigNumberish,
      rewardMultiplier: BigNumberish,
      bonusRewards: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  userLoyaltyData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalPoints: bigint;
        currentTier: bigint;
        pointsEarned: bigint;
        pointsRedeemed: bigint;
        lastActivity: bigint;
        streakDays: bigint;
        totalRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  userTransactions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string, boolean, bigint] & {
        timestamp: bigint;
        points: bigint;
        reason: string;
        isEarned: boolean;
        tierAtTime: bigint;
      }
    ],
    "view"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_STREAK_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_DOLLAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_ENTRY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINT_EXPIRY_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "awardEntryPoints"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "awardLoyaltyPoints"
  ): TypedContractMethod<
    [user: AddressLike, points: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "awardSpendingPoints"
  ): TypedContractMethod<
    [user: AddressLike, vmfAmount: BigNumberish, vmfPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklistedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateRewardAmount"
  ): TypedContractMethod<
    [user: AddressLike, points: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createLoyaltyTier"
  ): TypedContractMethod<
    [
      name: string,
      minPoints: BigNumberish,
      maxPoints: BigNumberish,
      rewardMultiplier: BigNumberish,
      bonusRewards: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLoyaltyTier"
  ): TypedContractMethod<
    [tierId: BigNumberish],
    [PizzaPartyLoyalty.LoyaltyTierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLoyaltyData"
  ): TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyLoyalty.UserLoyaltyDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTransactions"
  ): TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyLoyalty.PointTransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "loyaltyTiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        minPoints: bigint;
        maxPoints: bigint;
        rewardMultiplier: bigint;
        bonusRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeemPoints"
  ): TypedContractMethod<[points: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserBlacklist"
  ): TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPointsIssued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPointsRedeemed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLoyaltyTier"
  ): TypedContractMethod<
    [
      tierId: BigNumberish,
      name: string,
      minPoints: BigNumberish,
      maxPoints: BigNumberish,
      rewardMultiplier: BigNumberish,
      bonusRewards: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userLoyaltyData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalPoints: bigint;
        currentTier: bigint;
        pointsEarned: bigint;
        pointsRedeemed: bigint;
        lastActivity: bigint;
        streakDays: bigint;
        totalRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTransactions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string, boolean, bigint] & {
        timestamp: bigint;
        points: bigint;
        reason: string;
        isEarned: boolean;
        tierAtTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LoyaltyTierUpdated"
  ): TypedContractEvent<
    LoyaltyTierUpdatedEvent.InputTuple,
    LoyaltyTierUpdatedEvent.OutputTuple,
    LoyaltyTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PointsEarned"
  ): TypedContractEvent<
    PointsEarnedEvent.InputTuple,
    PointsEarnedEvent.OutputTuple,
    PointsEarnedEvent.OutputObject
  >;
  getEvent(
    key: "PointsRedeemed"
  ): TypedContractEvent<
    PointsRedeemedEvent.InputTuple,
    PointsRedeemedEvent.OutputTuple,
    PointsRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "StreakUpdated"
  ): TypedContractEvent<
    StreakUpdatedEvent.InputTuple,
    StreakUpdatedEvent.OutputTuple,
    StreakUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TierCreated"
  ): TypedContractEvent<
    TierCreatedEvent.InputTuple,
    TierCreatedEvent.OutputTuple,
    TierCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserBlacklisted"
  ): TypedContractEvent<
    UserBlacklistedEvent.InputTuple,
    UserBlacklistedEvent.OutputTuple,
    UserBlacklistedEvent.OutputObject
  >;

  filters: {
    "LoyaltyTierUpdated(address,uint256,uint256,string)": TypedContractEvent<
      LoyaltyTierUpdatedEvent.InputTuple,
      LoyaltyTierUpdatedEvent.OutputTuple,
      LoyaltyTierUpdatedEvent.OutputObject
    >;
    LoyaltyTierUpdated: TypedContractEvent<
      LoyaltyTierUpdatedEvent.InputTuple,
      LoyaltyTierUpdatedEvent.OutputTuple,
      LoyaltyTierUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PointsEarned(address,uint256,string,uint256,uint256)": TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
    PointsEarned: TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;

    "PointsRedeemed(address,uint256,uint256,uint256)": TypedContractEvent<
      PointsRedeemedEvent.InputTuple,
      PointsRedeemedEvent.OutputTuple,
      PointsRedeemedEvent.OutputObject
    >;
    PointsRedeemed: TypedContractEvent<
      PointsRedeemedEvent.InputTuple,
      PointsRedeemedEvent.OutputTuple,
      PointsRedeemedEvent.OutputObject
    >;

    "StreakUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;
    StreakUpdated: TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;

    "TierCreated(uint256,string,uint256,uint256,uint256)": TypedContractEvent<
      TierCreatedEvent.InputTuple,
      TierCreatedEvent.OutputTuple,
      TierCreatedEvent.OutputObject
    >;
    TierCreated: TypedContractEvent<
      TierCreatedEvent.InputTuple,
      TierCreatedEvent.OutputTuple,
      TierCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserBlacklisted(address,bool)": TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
    UserBlacklisted: TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
  };
}
