/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyReferral {
  export type ReferralClaimStruct = {
    claimer: AddressLike;
    claimTime: BigNumberish;
    rewardAmount: BigNumberish;
    isProcessed: boolean;
  };

  export type ReferralClaimStructOutput = [
    claimer: string,
    claimTime: bigint,
    rewardAmount: bigint,
    isProcessed: boolean
  ] & {
    claimer: string;
    claimTime: bigint;
    rewardAmount: bigint;
    isProcessed: boolean;
  };

  export type ReferralCodeStruct = {
    codeHash: BytesLike;
    creator: AddressLike;
    expiry: BigNumberish;
    claimed: boolean;
    claimCount: BigNumberish;
    maxClaims: BigNumberish;
    rewardAmount: BigNumberish;
    codeString: string;
    isActive: boolean;
  };

  export type ReferralCodeStructOutput = [
    codeHash: string,
    creator: string,
    expiry: bigint,
    claimed: boolean,
    claimCount: bigint,
    maxClaims: bigint,
    rewardAmount: bigint,
    codeString: string,
    isActive: boolean
  ] & {
    codeHash: string;
    creator: string;
    expiry: bigint;
    claimed: boolean;
    claimCount: bigint;
    maxClaims: bigint;
    rewardAmount: bigint;
    codeString: string;
    isActive: boolean;
  };

  export type UserReferralDataStruct = {
    totalCodesCreated: BigNumberish;
    totalCodesClaimed: BigNumberish;
    totalRewardsEarned: BigNumberish;
    lastCodeGeneration: BigNumberish;
    isBlacklisted: boolean;
    cooldownEndTime: BigNumberish;
  };

  export type UserReferralDataStructOutput = [
    totalCodesCreated: bigint,
    totalCodesClaimed: bigint,
    totalRewardsEarned: bigint,
    lastCodeGeneration: bigint,
    isBlacklisted: boolean,
    cooldownEndTime: bigint
  ] & {
    totalCodesCreated: bigint;
    totalCodesClaimed: bigint;
    totalRewardsEarned: bigint;
    lastCodeGeneration: bigint;
    isBlacklisted: boolean;
    cooldownEndTime: bigint;
  };
}

export interface PizzaPartyReferralInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BONUS_REWARD_AMOUNT"
      | "CLAIM_COOLDOWN"
      | "CODE_EXPIRY_DURATION"
      | "DEFAULT_REWARD_AMOUNT"
      | "GENERATION_COOLDOWN"
      | "MAX_CLAIMS_PER_CODE"
      | "MAX_CODES_PER_USER"
      | "MAX_CODE_LENGTH"
      | "MIN_CODE_LENGTH"
      | "blacklistedAddresses"
      | "codeClaims"
      | "createReferralCode"
      | "emergencyPause"
      | "emergencyWithdraw"
      | "getReferralClaims"
      | "getReferralCodeInfo"
      | "getUserReferralData"
      | "owner"
      | "paused"
      | "processReferralCode"
      | "referralCodes"
      | "renounceOwnership"
      | "setUserBlacklist"
      | "totalCodesClaimed"
      | "totalCodesGenerated"
      | "totalRewardsDistributed"
      | "transferOwnership"
      | "userClaimCount"
      | "userReferralData"
      | "vmfToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "ReferralCodeClaimed"
      | "ReferralCodeGenerated"
      | "ReferralRewardDistributed"
      | "Unpaused"
      | "UserBlacklisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BONUS_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CODE_EXPIRY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENERATION_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CLAIMS_PER_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CODES_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CODE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CODE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "codeClaims",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralClaims",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralCodeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processReferralCode",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCodesClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCodesGenerated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userReferralData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BONUS_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CODE_EXPIRY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENERATION_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CLAIMS_PER_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CODES_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CODE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CODE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codeClaims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralCodeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCodesClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCodesGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReferralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeClaimedEvent {
  export type InputTuple = [
    codeHash: BytesLike,
    claimer: AddressLike,
    rewardAmount: BigNumberish,
    claimTime: BigNumberish
  ];
  export type OutputTuple = [
    codeHash: string,
    claimer: string,
    rewardAmount: bigint,
    claimTime: bigint
  ];
  export interface OutputObject {
    codeHash: string;
    claimer: string;
    rewardAmount: bigint;
    claimTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeGeneratedEvent {
  export type InputTuple = [
    codeHash: BytesLike,
    creator: AddressLike,
    codeString: string,
    expiry: BigNumberish,
    maxClaims: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    codeHash: string,
    creator: string,
    codeString: string,
    expiry: bigint,
    maxClaims: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    codeHash: string;
    creator: string;
    codeString: string;
    expiry: bigint;
    maxClaims: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRewardDistributedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referee: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referee: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referee: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlacklistedEvent {
  export type InputTuple = [user: AddressLike, blacklisted: boolean];
  export type OutputTuple = [user: string, blacklisted: boolean];
  export interface OutputObject {
    user: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyReferral extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyReferral;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BONUS_REWARD_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  CLAIM_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  CODE_EXPIRY_DURATION: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_REWARD_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  GENERATION_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  MAX_CLAIMS_PER_CODE: TypedContractMethod<[], [bigint], "view">;

  MAX_CODES_PER_USER: TypedContractMethod<[], [bigint], "view">;

  MAX_CODE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MIN_CODE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  blacklistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  codeClaims: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        claimer: string;
        claimTime: bigint;
        rewardAmount: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  createReferralCode: TypedContractMethod<[], [void], "nonpayable">;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getReferralClaims: TypedContractMethod<
    [code: string],
    [PizzaPartyReferral.ReferralClaimStructOutput[]],
    "view"
  >;

  getReferralCodeInfo: TypedContractMethod<
    [code: string],
    [PizzaPartyReferral.ReferralCodeStructOutput],
    "view"
  >;

  getUserReferralData: TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyReferral.UserReferralDataStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processReferralCode: TypedContractMethod<
    [code: string, user: AddressLike],
    [void],
    "nonpayable"
  >;

  referralCodes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        codeHash: string;
        creator: string;
        expiry: bigint;
        claimed: boolean;
        claimCount: bigint;
        maxClaims: bigint;
        rewardAmount: bigint;
        codeString: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setUserBlacklist: TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  totalCodesClaimed: TypedContractMethod<[], [bigint], "view">;

  totalCodesGenerated: TypedContractMethod<[], [bigint], "view">;

  totalRewardsDistributed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userClaimCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userReferralData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalCodesCreated: bigint;
        totalCodesClaimed: bigint;
        totalRewardsEarned: bigint;
        lastCodeGeneration: bigint;
        isBlacklisted: boolean;
        cooldownEndTime: bigint;
      }
    ],
    "view"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BONUS_REWARD_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLAIM_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CODE_EXPIRY_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_REWARD_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GENERATION_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CLAIMS_PER_CODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CODES_PER_USER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CODE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CODE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "codeClaims"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        claimer: string;
        claimTime: bigint;
        rewardAmount: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createReferralCode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getReferralClaims"
  ): TypedContractMethod<
    [code: string],
    [PizzaPartyReferral.ReferralClaimStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralCodeInfo"
  ): TypedContractMethod<
    [code: string],
    [PizzaPartyReferral.ReferralCodeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReferralData"
  ): TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyReferral.UserReferralDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processReferralCode"
  ): TypedContractMethod<
    [code: string, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "referralCodes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        codeHash: string;
        creator: string;
        expiry: bigint;
        claimed: boolean;
        claimCount: bigint;
        maxClaims: bigint;
        rewardAmount: bigint;
        codeString: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserBlacklist"
  ): TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalCodesClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCodesGenerated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewardsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userClaimCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userReferralData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalCodesCreated: bigint;
        totalCodesClaimed: bigint;
        totalRewardsEarned: bigint;
        lastCodeGeneration: bigint;
        isBlacklisted: boolean;
        cooldownEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeClaimed"
  ): TypedContractEvent<
    ReferralCodeClaimedEvent.InputTuple,
    ReferralCodeClaimedEvent.OutputTuple,
    ReferralCodeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeGenerated"
  ): TypedContractEvent<
    ReferralCodeGeneratedEvent.InputTuple,
    ReferralCodeGeneratedEvent.OutputTuple,
    ReferralCodeGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRewardDistributed"
  ): TypedContractEvent<
    ReferralRewardDistributedEvent.InputTuple,
    ReferralRewardDistributedEvent.OutputTuple,
    ReferralRewardDistributedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserBlacklisted"
  ): TypedContractEvent<
    UserBlacklistedEvent.InputTuple,
    UserBlacklistedEvent.OutputTuple,
    UserBlacklistedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReferralCodeClaimed(bytes32,address,uint256,uint256)": TypedContractEvent<
      ReferralCodeClaimedEvent.InputTuple,
      ReferralCodeClaimedEvent.OutputTuple,
      ReferralCodeClaimedEvent.OutputObject
    >;
    ReferralCodeClaimed: TypedContractEvent<
      ReferralCodeClaimedEvent.InputTuple,
      ReferralCodeClaimedEvent.OutputTuple,
      ReferralCodeClaimedEvent.OutputObject
    >;

    "ReferralCodeGenerated(bytes32,address,string,uint256,uint256,uint256)": TypedContractEvent<
      ReferralCodeGeneratedEvent.InputTuple,
      ReferralCodeGeneratedEvent.OutputTuple,
      ReferralCodeGeneratedEvent.OutputObject
    >;
    ReferralCodeGenerated: TypedContractEvent<
      ReferralCodeGeneratedEvent.InputTuple,
      ReferralCodeGeneratedEvent.OutputTuple,
      ReferralCodeGeneratedEvent.OutputObject
    >;

    "ReferralRewardDistributed(address,address,uint256)": TypedContractEvent<
      ReferralRewardDistributedEvent.InputTuple,
      ReferralRewardDistributedEvent.OutputTuple,
      ReferralRewardDistributedEvent.OutputObject
    >;
    ReferralRewardDistributed: TypedContractEvent<
      ReferralRewardDistributedEvent.InputTuple,
      ReferralRewardDistributedEvent.OutputTuple,
      ReferralRewardDistributedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserBlacklisted(address,bool)": TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
    UserBlacklisted: TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
  };
}
