/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UniswapPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CACHE_DURATION"
      | "POOL_FEE"
      | "PRICE_PRECISION"
      | "UNISWAP_V3_FACTORY"
      | "USDC_TOKEN"
      | "VMF_TOKEN"
      | "getRequiredVMFForDollar"
      | "getVMFPrice"
      | "owner"
      | "priceCache"
      | "renounceOwnership"
      | "setEmergencyPrice"
      | "transferOwnership"
      | "updatePriceCache"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyPriceSet"
      | "OwnershipTransferred"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CACHE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VMF_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRequiredVMFForDollar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVMFPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceCache",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CACHE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VMF_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredVMFForDollar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVMFPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceCache", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceCache",
    data: BytesLike
  ): Result;
}

export namespace EmergencyPriceSetEvent {
  export type InputTuple = [price: BigNumberish, setter: AddressLike];
  export type OutputTuple = [price: bigint, setter: string];
  export interface OutputObject {
    price: bigint;
    setter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [price: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [price: bigint, timestamp: bigint];
  export interface OutputObject {
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: UniswapPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CACHE_DURATION: TypedContractMethod<[], [bigint], "view">;

  POOL_FEE: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  UNISWAP_V3_FACTORY: TypedContractMethod<[], [string], "view">;

  USDC_TOKEN: TypedContractMethod<[], [string], "view">;

  VMF_TOKEN: TypedContractMethod<[], [string], "view">;

  getRequiredVMFForDollar: TypedContractMethod<[], [bigint], "view">;

  getVMFPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceCache: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyPrice: TypedContractMethod<
    [_price: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceCache: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CACHE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POOL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNISWAP_V3_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDC_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VMF_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredVMFForDollar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVMFPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceCache"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyPrice"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceCache"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyPriceSet"
  ): TypedContractEvent<
    EmergencyPriceSetEvent.InputTuple,
    EmergencyPriceSetEvent.OutputTuple,
    EmergencyPriceSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "EmergencyPriceSet(uint256,address)": TypedContractEvent<
      EmergencyPriceSetEvent.InputTuple,
      EmergencyPriceSetEvent.OutputTuple,
      EmergencyPriceSetEvent.OutputObject
    >;
    EmergencyPriceSet: TypedContractEvent<
      EmergencyPriceSetEvent.InputTuple,
      EmergencyPriceSetEvent.OutputTuple,
      EmergencyPriceSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
