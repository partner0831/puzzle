/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyAdvancedRandomness {
  export type ContributorDataStruct = {
    totalContributions: BigNumberish;
    successfulReveals: BigNumberish;
    failedReveals: BigNumberish;
    lastContribution: BigNumberish;
    isBlacklisted: boolean;
    reputation: BigNumberish;
  };

  export type ContributorDataStructOutput = [
    totalContributions: bigint,
    successfulReveals: bigint,
    failedReveals: bigint,
    lastContribution: bigint,
    isBlacklisted: boolean,
    reputation: bigint
  ] & {
    totalContributions: bigint;
    successfulReveals: bigint;
    failedReveals: bigint;
    lastContribution: bigint;
    isBlacklisted: boolean;
    reputation: bigint;
  };
}

export interface PizzaPartyAdvancedRandomnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMIT_PHASE_DURATION"
      | "MAX_CONTRIBUTORS"
      | "MIN_CONTRIBUTORS"
      | "MIN_ENTROPY_BITS"
      | "REPUTATION_THRESHOLD"
      | "REVEAL_PHASE_DURATION"
      | "activeContributors"
      | "blacklistedContributors"
      | "commitEntropy"
      | "completeRound"
      | "contributorData"
      | "currentRoundId"
      | "emergencyPause"
      | "generateRandomNumber"
      | "getContributorData"
      | "getCurrentRoundInfo"
      | "getFinalSeed"
      | "getRoundContributors"
      | "owner"
      | "paused"
      | "randomnessRounds"
      | "renounceOwnership"
      | "revealEntropy"
      | "setContributorBlacklist"
      | "startNewRound"
      | "totalContributors"
      | "totalEntropyGenerated"
      | "totalRounds"
      | "transferOwnership"
      | "updateReputation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributorBlacklisted"
      | "EntropyCommitted"
      | "EntropyRevealed"
      | "OwnershipTransferred"
      | "Paused"
      | "ReputationUpdated"
      | "RoundCompleted"
      | "RoundStarted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMIT_PHASE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONTRIBUTORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CONTRIBUTORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ENTROPY_BITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVEAL_PHASE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedContributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitEntropy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomNumber",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalSeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundContributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealEntropy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContributorBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEntropyGenerated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMIT_PHASE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONTRIBUTORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CONTRIBUTORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ENTROPY_BITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_PHASE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitEntropy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealEntropy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContributorBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEntropyGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
}

export namespace ContributorBlacklistedEvent {
  export type InputTuple = [contributor: AddressLike, blacklisted: boolean];
  export type OutputTuple = [contributor: string, blacklisted: boolean];
  export interface OutputObject {
    contributor: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntropyCommittedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    contributor: AddressLike,
    commitment: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    contributor: string,
    commitment: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    contributor: string;
    commitment: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntropyRevealedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    contributor: AddressLike,
    entropy: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    contributor: string,
    entropy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    contributor: string;
    entropy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    contributor: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundCompletedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    finalSeed: BytesLike,
    totalContributors: BigNumberish,
    totalEntropy: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    finalSeed: string,
    totalContributors: bigint,
    totalEntropy: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    finalSeed: string;
    totalContributors: bigint;
    totalEntropy: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundStartedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startTime: BigNumberish,
    commitPhaseEnd: BigNumberish,
    revealPhaseEnd: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    startTime: bigint,
    commitPhaseEnd: bigint,
    revealPhaseEnd: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    startTime: bigint;
    commitPhaseEnd: bigint;
    revealPhaseEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyAdvancedRandomness extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyAdvancedRandomness;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyAdvancedRandomnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMIT_PHASE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_CONTRIBUTORS: TypedContractMethod<[], [bigint], "view">;

  MIN_CONTRIBUTORS: TypedContractMethod<[], [bigint], "view">;

  MIN_ENTROPY_BITS: TypedContractMethod<[], [bigint], "view">;

  REPUTATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  REVEAL_PHASE_DURATION: TypedContractMethod<[], [bigint], "view">;

  activeContributors: TypedContractMethod<[], [bigint], "view">;

  blacklistedContributors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  commitEntropy: TypedContractMethod<
    [commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  completeRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  contributorData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalContributions: bigint;
        successfulReveals: bigint;
        failedReveals: bigint;
        lastContribution: bigint;
        isBlacklisted: boolean;
        reputation: bigint;
      }
    ],
    "view"
  >;

  currentRoundId: TypedContractMethod<[], [bigint], "view">;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  generateRandomNumber: TypedContractMethod<
    [seed: BytesLike, maxValue: BigNumberish],
    [bigint],
    "view"
  >;

  getContributorData: TypedContractMethod<
    [contributor: AddressLike],
    [PizzaPartyAdvancedRandomness.ContributorDataStructOutput],
    "view"
  >;

  getCurrentRoundInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        roundId: bigint;
        startTime: bigint;
        commitPhaseEnd: bigint;
        revealPhaseEnd: bigint;
        isCompleted: boolean;
        _totalContributors: bigint;
        totalEntropy: bigint;
      }
    ],
    "view"
  >;

  getFinalSeed: TypedContractMethod<[roundId: BigNumberish], [string], "view">;

  getRoundContributors: TypedContractMethod<
    [roundId: BigNumberish],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  randomnessRounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        roundId: bigint;
        startTime: bigint;
        endTime: bigint;
        commitPhaseEnd: bigint;
        revealPhaseEnd: bigint;
        finalSeed: string;
        isCompleted: boolean;
        totalContributors: bigint;
        totalEntropy: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealEntropy: TypedContractMethod<
    [entropy: BytesLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  setContributorBlacklist: TypedContractMethod<
    [contributor: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  startNewRound: TypedContractMethod<[], [void], "nonpayable">;

  totalContributors: TypedContractMethod<[], [bigint], "view">;

  totalEntropyGenerated: TypedContractMethod<[], [bigint], "view">;

  totalRounds: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [contributor: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMIT_PHASE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONTRIBUTORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CONTRIBUTORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ENTROPY_BITS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVEAL_PHASE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeContributors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistedContributors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "commitEntropy"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contributorData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalContributions: bigint;
        successfulReveals: bigint;
        failedReveals: bigint;
        lastContribution: bigint;
        isBlacklisted: boolean;
        reputation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateRandomNumber"
  ): TypedContractMethod<
    [seed: BytesLike, maxValue: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributorData"
  ): TypedContractMethod<
    [contributor: AddressLike],
    [PizzaPartyAdvancedRandomness.ContributorDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentRoundInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        roundId: bigint;
        startTime: bigint;
        commitPhaseEnd: bigint;
        revealPhaseEnd: bigint;
        isCompleted: boolean;
        _totalContributors: bigint;
        totalEntropy: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFinalSeed"
  ): TypedContractMethod<[roundId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundContributors"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "randomnessRounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        roundId: bigint;
        startTime: bigint;
        endTime: bigint;
        commitPhaseEnd: bigint;
        revealPhaseEnd: bigint;
        finalSeed: string;
        isCompleted: boolean;
        totalContributors: bigint;
        totalEntropy: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealEntropy"
  ): TypedContractMethod<
    [entropy: BytesLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContributorBlacklist"
  ): TypedContractMethod<
    [contributor: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startNewRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalContributors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEntropyGenerated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRounds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [contributor: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContributorBlacklisted"
  ): TypedContractEvent<
    ContributorBlacklistedEvent.InputTuple,
    ContributorBlacklistedEvent.OutputTuple,
    ContributorBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "EntropyCommitted"
  ): TypedContractEvent<
    EntropyCommittedEvent.InputTuple,
    EntropyCommittedEvent.OutputTuple,
    EntropyCommittedEvent.OutputObject
  >;
  getEvent(
    key: "EntropyRevealed"
  ): TypedContractEvent<
    EntropyRevealedEvent.InputTuple,
    EntropyRevealedEvent.OutputTuple,
    EntropyRevealedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoundCompleted"
  ): TypedContractEvent<
    RoundCompletedEvent.InputTuple,
    RoundCompletedEvent.OutputTuple,
    RoundCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RoundStarted"
  ): TypedContractEvent<
    RoundStartedEvent.InputTuple,
    RoundStartedEvent.OutputTuple,
    RoundStartedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContributorBlacklisted(address,bool)": TypedContractEvent<
      ContributorBlacklistedEvent.InputTuple,
      ContributorBlacklistedEvent.OutputTuple,
      ContributorBlacklistedEvent.OutputObject
    >;
    ContributorBlacklisted: TypedContractEvent<
      ContributorBlacklistedEvent.InputTuple,
      ContributorBlacklistedEvent.OutputTuple,
      ContributorBlacklistedEvent.OutputObject
    >;

    "EntropyCommitted(uint256,address,bytes32,uint256)": TypedContractEvent<
      EntropyCommittedEvent.InputTuple,
      EntropyCommittedEvent.OutputTuple,
      EntropyCommittedEvent.OutputObject
    >;
    EntropyCommitted: TypedContractEvent<
      EntropyCommittedEvent.InputTuple,
      EntropyCommittedEvent.OutputTuple,
      EntropyCommittedEvent.OutputObject
    >;

    "EntropyRevealed(uint256,address,bytes32,uint256)": TypedContractEvent<
      EntropyRevealedEvent.InputTuple,
      EntropyRevealedEvent.OutputTuple,
      EntropyRevealedEvent.OutputObject
    >;
    EntropyRevealed: TypedContractEvent<
      EntropyRevealedEvent.InputTuple,
      EntropyRevealedEvent.OutputTuple,
      EntropyRevealedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "RoundCompleted(uint256,bytes32,uint256,uint256,uint256)": TypedContractEvent<
      RoundCompletedEvent.InputTuple,
      RoundCompletedEvent.OutputTuple,
      RoundCompletedEvent.OutputObject
    >;
    RoundCompleted: TypedContractEvent<
      RoundCompletedEvent.InputTuple,
      RoundCompletedEvent.OutputTuple,
      RoundCompletedEvent.OutputObject
    >;

    "RoundStarted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RoundStartedEvent.InputTuple,
      RoundStartedEvent.OutputTuple,
      RoundStartedEvent.OutputObject
    >;
    RoundStarted: TypedContractEvent<
      RoundStartedEvent.InputTuple,
      RoundStartedEvent.OutputTuple,
      RoundStartedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
