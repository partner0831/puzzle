/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyAnalytics {
  export type PerformanceMetricsStruct = {
    totalGasUsed: BigNumberish;
    averageGasPerTransaction: BigNumberish;
    totalTransactions: BigNumberish;
    optimizationSavings: BigNumberish;
    lastOptimization: BigNumberish;
  };

  export type PerformanceMetricsStructOutput = [
    totalGasUsed: bigint,
    averageGasPerTransaction: bigint,
    totalTransactions: bigint,
    optimizationSavings: bigint,
    lastOptimization: bigint
  ] & {
    totalGasUsed: bigint;
    averageGasPerTransaction: bigint;
    totalTransactions: bigint;
    optimizationSavings: bigint;
    lastOptimization: bigint;
  };
}

export interface PizzaPartyAnalyticsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchSize"
      | "calculateOptimalBatchSize"
      | "currentBatchId"
      | "emergencyPause"
      | "gameAnalytics"
      | "gasOptimizationThreshold"
      | "getAnalyticsSummary"
      | "getBatchInfo"
      | "getPerformanceMetrics"
      | "getPlayerAnalytics"
      | "lastAnalyticsUpdate"
      | "owner"
      | "paused"
      | "performanceMetrics"
      | "playerBatches"
      | "playerLastActivity"
      | "playerTotalEntries"
      | "playerTotalRewards"
      | "processPlayerBatch"
      | "recordPlayerActivity"
      | "renounceOwnership"
      | "totalBatches"
      | "totalGasOptimized"
      | "totalPlayersProcessed"
      | "transferOwnership"
      | "updateBatchSize"
      | "updateGameAnalytics"
      | "updateGasThreshold"
      | "vmfToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnalyticsUpdated"
      | "BatchProcessed"
      | "BatchSizeUpdated"
      | "GasOptimizationCompleted"
      | "GasThresholdUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PlayerActivityRecorded"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "batchSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateOptimalBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "gameAnalytics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasOptimizationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnalyticsSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAnalytics",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAnalyticsUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerLastActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTotalEntries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTotalRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processPlayerBatch",
    values: [AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPlayerActivity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGasOptimized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlayersProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGameAnalytics",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "batchSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateOptimalBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasOptimizationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnalyticsSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAnalyticsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerLastActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerTotalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPlayerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPlayerActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGasOptimized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlayersProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGameAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
}

export namespace AnalyticsUpdatedEvent {
  export type InputTuple = [
    analyticsId: BigNumberish,
    totalPlayers: BigNumberish,
    activePlayers: BigNumberish,
    totalEntries: BigNumberish,
    totalRewards: BigNumberish,
    gasUsed: BigNumberish
  ];
  export type OutputTuple = [
    analyticsId: bigint,
    totalPlayers: bigint,
    activePlayers: bigint,
    totalEntries: bigint,
    totalRewards: bigint,
    gasUsed: bigint
  ];
  export interface OutputObject {
    analyticsId: bigint;
    totalPlayers: bigint;
    activePlayers: bigint;
    totalEntries: bigint;
    totalRewards: bigint;
    gasUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchProcessedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    players: AddressLike[],
    totalEntries: BigNumberish,
    totalRewards: BigNumberish,
    gasUsed: BigNumberish
  ];
  export type OutputTuple = [
    batchId: bigint,
    players: string[],
    totalEntries: bigint,
    totalRewards: bigint,
    gasUsed: bigint
  ];
  export interface OutputObject {
    batchId: bigint;
    players: string[];
    totalEntries: bigint;
    totalRewards: bigint;
    gasUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchSizeUpdatedEvent {
  export type InputTuple = [oldSize: BigNumberish, newSize: BigNumberish];
  export type OutputTuple = [oldSize: bigint, newSize: bigint];
  export interface OutputObject {
    oldSize: bigint;
    newSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasOptimizationCompletedEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    gasSaved: BigNumberish,
    optimizationThreshold: BigNumberish
  ];
  export type OutputTuple = [
    timestamp: bigint,
    gasSaved: bigint,
    optimizationThreshold: bigint
  ];
  export interface OutputObject {
    timestamp: bigint;
    gasSaved: bigint;
    optimizationThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasThresholdUpdatedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    newThreshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerActivityRecordedEvent {
  export type InputTuple = [
    player: AddressLike,
    entryCount: BigNumberish,
    rewardAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    entryCount: bigint,
    rewardAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    player: string;
    entryCount: bigint;
    rewardAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyAnalytics extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyAnalytics;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyAnalyticsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchSize: TypedContractMethod<[], [bigint], "view">;

  calculateOptimalBatchSize: TypedContractMethod<[], [bigint], "view">;

  currentBatchId: TypedContractMethod<[], [bigint], "view">;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  gameAnalytics: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPlayers: bigint;
        activePlayers: bigint;
        totalEntries: bigint;
        totalRewards: bigint;
        averageEntryFee: bigint;
        gasUsed: bigint;
        timestamp: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;

  gasOptimizationThreshold: TypedContractMethod<[], [bigint], "view">;

  getAnalyticsSummary: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalPlayersProcessed: bigint;
        _totalBatches: bigint;
        _totalGasOptimized: bigint;
        _lastAnalyticsUpdate: bigint;
        _currentBatchId: bigint;
      }
    ],
    "view"
  >;

  getBatchInfo: TypedContractMethod<
    [batchId: BigNumberish],
    [
      [string[], bigint[], bigint[], bigint, boolean] & {
        players: string[];
        entryCounts: bigint[];
        rewardAmounts: bigint[];
        timestamp: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  getPerformanceMetrics: TypedContractMethod<
    [],
    [PizzaPartyAnalytics.PerformanceMetricsStructOutput],
    "view"
  >;

  getPlayerAnalytics: TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastActivity: bigint;
        totalEntries: bigint;
        totalRewards: bigint;
      }
    ],
    "view"
  >;

  lastAnalyticsUpdate: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performanceMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalGasUsed: bigint;
        averageGasPerTransaction: bigint;
        totalTransactions: bigint;
        optimizationSavings: bigint;
        lastOptimization: bigint;
      }
    ],
    "view"
  >;

  playerBatches: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { timestamp: bigint; isProcessed: boolean }],
    "view"
  >;

  playerLastActivity: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  playerTotalEntries: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  playerTotalRewards: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  processPlayerBatch: TypedContractMethod<
    [
      players: AddressLike[],
      entryCounts: BigNumberish[],
      rewardAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  recordPlayerActivity: TypedContractMethod<
    [player: AddressLike, entryCount: BigNumberish, rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalBatches: TypedContractMethod<[], [bigint], "view">;

  totalGasOptimized: TypedContractMethod<[], [bigint], "view">;

  totalPlayersProcessed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBatchSize: TypedContractMethod<
    [newBatchSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateGameAnalytics: TypedContractMethod<
    [
      totalPlayers: BigNumberish,
      activePlayers: BigNumberish,
      totalEntries: BigNumberish,
      totalRewards: BigNumberish,
      averageEntryFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateGasThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOptimalBatchSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameAnalytics"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPlayers: bigint;
        activePlayers: bigint;
        totalEntries: bigint;
        totalRewards: bigint;
        averageEntryFee: bigint;
        gasUsed: bigint;
        timestamp: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gasOptimizationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAnalyticsSummary"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalPlayersProcessed: bigint;
        _totalBatches: bigint;
        _totalGasOptimized: bigint;
        _lastAnalyticsUpdate: bigint;
        _currentBatchId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchInfo"
  ): TypedContractMethod<
    [batchId: BigNumberish],
    [
      [string[], bigint[], bigint[], bigint, boolean] & {
        players: string[];
        entryCounts: bigint[];
        rewardAmounts: bigint[];
        timestamp: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerformanceMetrics"
  ): TypedContractMethod<
    [],
    [PizzaPartyAnalytics.PerformanceMetricsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerAnalytics"
  ): TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastActivity: bigint;
        totalEntries: bigint;
        totalRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastAnalyticsUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performanceMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalGasUsed: bigint;
        averageGasPerTransaction: bigint;
        totalTransactions: bigint;
        optimizationSavings: bigint;
        lastOptimization: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerBatches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { timestamp: bigint; isProcessed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerLastActivity"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerTotalEntries"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerTotalRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processPlayerBatch"
  ): TypedContractMethod<
    [
      players: AddressLike[],
      entryCounts: BigNumberish[],
      rewardAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordPlayerActivity"
  ): TypedContractMethod<
    [player: AddressLike, entryCount: BigNumberish, rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBatches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalGasOptimized"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPlayersProcessed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBatchSize"
  ): TypedContractMethod<[newBatchSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGameAnalytics"
  ): TypedContractMethod<
    [
      totalPlayers: BigNumberish,
      activePlayers: BigNumberish,
      totalEntries: BigNumberish,
      totalRewards: BigNumberish,
      averageEntryFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateGasThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AnalyticsUpdated"
  ): TypedContractEvent<
    AnalyticsUpdatedEvent.InputTuple,
    AnalyticsUpdatedEvent.OutputTuple,
    AnalyticsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchProcessed"
  ): TypedContractEvent<
    BatchProcessedEvent.InputTuple,
    BatchProcessedEvent.OutputTuple,
    BatchProcessedEvent.OutputObject
  >;
  getEvent(
    key: "BatchSizeUpdated"
  ): TypedContractEvent<
    BatchSizeUpdatedEvent.InputTuple,
    BatchSizeUpdatedEvent.OutputTuple,
    BatchSizeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GasOptimizationCompleted"
  ): TypedContractEvent<
    GasOptimizationCompletedEvent.InputTuple,
    GasOptimizationCompletedEvent.OutputTuple,
    GasOptimizationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GasThresholdUpdated"
  ): TypedContractEvent<
    GasThresholdUpdatedEvent.InputTuple,
    GasThresholdUpdatedEvent.OutputTuple,
    GasThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerActivityRecorded"
  ): TypedContractEvent<
    PlayerActivityRecordedEvent.InputTuple,
    PlayerActivityRecordedEvent.OutputTuple,
    PlayerActivityRecordedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AnalyticsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AnalyticsUpdatedEvent.InputTuple,
      AnalyticsUpdatedEvent.OutputTuple,
      AnalyticsUpdatedEvent.OutputObject
    >;
    AnalyticsUpdated: TypedContractEvent<
      AnalyticsUpdatedEvent.InputTuple,
      AnalyticsUpdatedEvent.OutputTuple,
      AnalyticsUpdatedEvent.OutputObject
    >;

    "BatchProcessed(uint256,address[],uint256,uint256,uint256)": TypedContractEvent<
      BatchProcessedEvent.InputTuple,
      BatchProcessedEvent.OutputTuple,
      BatchProcessedEvent.OutputObject
    >;
    BatchProcessed: TypedContractEvent<
      BatchProcessedEvent.InputTuple,
      BatchProcessedEvent.OutputTuple,
      BatchProcessedEvent.OutputObject
    >;

    "BatchSizeUpdated(uint256,uint256)": TypedContractEvent<
      BatchSizeUpdatedEvent.InputTuple,
      BatchSizeUpdatedEvent.OutputTuple,
      BatchSizeUpdatedEvent.OutputObject
    >;
    BatchSizeUpdated: TypedContractEvent<
      BatchSizeUpdatedEvent.InputTuple,
      BatchSizeUpdatedEvent.OutputTuple,
      BatchSizeUpdatedEvent.OutputObject
    >;

    "GasOptimizationCompleted(uint256,uint256,uint256)": TypedContractEvent<
      GasOptimizationCompletedEvent.InputTuple,
      GasOptimizationCompletedEvent.OutputTuple,
      GasOptimizationCompletedEvent.OutputObject
    >;
    GasOptimizationCompleted: TypedContractEvent<
      GasOptimizationCompletedEvent.InputTuple,
      GasOptimizationCompletedEvent.OutputTuple,
      GasOptimizationCompletedEvent.OutputObject
    >;

    "GasThresholdUpdated(uint256,uint256)": TypedContractEvent<
      GasThresholdUpdatedEvent.InputTuple,
      GasThresholdUpdatedEvent.OutputTuple,
      GasThresholdUpdatedEvent.OutputObject
    >;
    GasThresholdUpdated: TypedContractEvent<
      GasThresholdUpdatedEvent.InputTuple,
      GasThresholdUpdatedEvent.OutputTuple,
      GasThresholdUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlayerActivityRecorded(address,uint256,uint256,uint256)": TypedContractEvent<
      PlayerActivityRecordedEvent.InputTuple,
      PlayerActivityRecordedEvent.OutputTuple,
      PlayerActivityRecordedEvent.OutputObject
    >;
    PlayerActivityRecorded: TypedContractEvent<
      PlayerActivityRecordedEvent.InputTuple,
      PlayerActivityRecordedEvent.OutputTuple,
      PlayerActivityRecordedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
