/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PizzaPartyDynamicPricing {
  export type FeeHistoryStruct = {
    timestamp: BigNumberish;
    vmfPrice: BigNumberish;
    calculatedFee: BigNumberish;
    actualFee: BigNumberish;
    blockNumber: BigNumberish;
  };

  export type FeeHistoryStructOutput = [
    timestamp: bigint,
    vmfPrice: bigint,
    calculatedFee: bigint,
    actualFee: bigint,
    blockNumber: bigint
  ] & {
    timestamp: bigint;
    vmfPrice: bigint;
    calculatedFee: bigint;
    actualFee: bigint;
    blockNumber: bigint;
  };
}

export interface PizzaPartyDynamicPricingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateDynamicEntryFee"
      | "collectEntryFee"
      | "emergencyPause"
      | "feeHistory"
      | "feeHistoryCount"
      | "getCurrentEntryFee"
      | "getFeeHistory"
      | "getPricingStats"
      | "getVMFPrice"
      | "lastPriceUpdate"
      | "lastVMFPrice"
      | "owner"
      | "paused"
      | "priceOracle"
      | "pricingConfig"
      | "renounceOwnership"
      | "totalEntries"
      | "totalFeesCollected"
      | "transferOwnership"
      | "updatePriceOracle"
      | "updatePricingConfig"
      | "vmfToken"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DynamicFeeCalculated"
      | "FeeCollected"
      | "OwnershipTransferred"
      | "Paused"
      | "PriceOracleUpdated"
      | "PricingConfigUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateDynamicEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectEntryFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feeHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeHistoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricingStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVMFPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPriceUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastVMFPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEntries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePricingConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateDynamicEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeHistoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVMFPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastVMFPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePricingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DynamicFeeCalculatedEvent {
  export type InputTuple = [
    vmfPrice: BigNumberish,
    calculatedFee: BigNumberish,
    actualFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    vmfPrice: bigint,
    calculatedFee: bigint,
    actualFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    vmfPrice: bigint;
    calculatedFee: bigint;
    actualFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [
    user: AddressLike,
    feeAmount: BigNumberish,
    vmfPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    feeAmount: bigint,
    vmfPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    feeAmount: bigint;
    vmfPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceOracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricingConfigUpdatedEvent {
  export type InputTuple = [
    baseEntryFee: BigNumberish,
    maxPriceDeviation: BigNumberish,
    priceUpdateThreshold: BigNumberish,
    minEntryFee: BigNumberish,
    maxEntryFee: BigNumberish,
    feeMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    baseEntryFee: bigint,
    maxPriceDeviation: bigint,
    priceUpdateThreshold: bigint,
    minEntryFee: bigint,
    maxEntryFee: bigint,
    feeMultiplier: bigint
  ];
  export interface OutputObject {
    baseEntryFee: bigint;
    maxPriceDeviation: bigint;
    priceUpdateThreshold: bigint;
    minEntryFee: bigint;
    maxEntryFee: bigint;
    feeMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyDynamicPricing extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyDynamicPricing;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyDynamicPricingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateDynamicEntryFee: TypedContractMethod<
    [],
    [[bigint, bigint] & { feeAmount: bigint; vmfPrice: bigint }],
    "view"
  >;

  collectEntryFee: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  feeHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        vmfPrice: bigint;
        calculatedFee: bigint;
        actualFee: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;

  feeHistoryCount: TypedContractMethod<[], [bigint], "view">;

  getCurrentEntryFee: TypedContractMethod<[], [bigint], "view">;

  getFeeHistory: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyDynamicPricing.FeeHistoryStructOutput[]],
    "view"
  >;

  getPricingStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalFeesCollected: bigint;
        _totalEntries: bigint;
        _averageFee: bigint;
        _lastVMFPrice: bigint;
        _lastPriceUpdate: bigint;
      }
    ],
    "view"
  >;

  getVMFPrice: TypedContractMethod<[], [bigint], "view">;

  lastPriceUpdate: TypedContractMethod<[], [bigint], "view">;

  lastVMFPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  pricingConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        baseEntryFee: bigint;
        maxPriceDeviation: bigint;
        priceUpdateThreshold: bigint;
        minEntryFee: bigint;
        maxEntryFee: bigint;
        feeMultiplier: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalEntries: TypedContractMethod<[], [bigint], "view">;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceOracle: TypedContractMethod<
    [_newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePricingConfig: TypedContractMethod<
    [
      _baseEntryFee: BigNumberish,
      _maxPriceDeviation: BigNumberish,
      _priceUpdateThreshold: BigNumberish,
      _minEntryFee: BigNumberish,
      _maxEntryFee: BigNumberish,
      _feeMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  withdrawFees: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateDynamicEntryFee"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { feeAmount: bigint; vmfPrice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectEntryFee"
  ): TypedContractMethod<[user: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        vmfPrice: bigint;
        calculatedFee: bigint;
        actualFee: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeHistoryCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentEntryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeHistory"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyDynamicPricing.FeeHistoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPricingStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalFeesCollected: bigint;
        _totalEntries: bigint;
        _averageFee: bigint;
        _lastVMFPrice: bigint;
        _lastPriceUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVMFPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPriceUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastVMFPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricingConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        baseEntryFee: bigint;
        maxPriceDeviation: bigint;
        priceUpdateThreshold: bigint;
        minEntryFee: bigint;
        maxEntryFee: bigint;
        feeMultiplier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalEntries"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceOracle"
  ): TypedContractMethod<[_newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePricingConfig"
  ): TypedContractMethod<
    [
      _baseEntryFee: BigNumberish,
      _maxPriceDeviation: BigNumberish,
      _priceUpdateThreshold: BigNumberish,
      _minEntryFee: BigNumberish,
      _maxEntryFee: BigNumberish,
      _feeMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DynamicFeeCalculated"
  ): TypedContractEvent<
    DynamicFeeCalculatedEvent.InputTuple,
    DynamicFeeCalculatedEvent.OutputTuple,
    DynamicFeeCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceOracleUpdated"
  ): TypedContractEvent<
    PriceOracleUpdatedEvent.InputTuple,
    PriceOracleUpdatedEvent.OutputTuple,
    PriceOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PricingConfigUpdated"
  ): TypedContractEvent<
    PricingConfigUpdatedEvent.InputTuple,
    PricingConfigUpdatedEvent.OutputTuple,
    PricingConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DynamicFeeCalculated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DynamicFeeCalculatedEvent.InputTuple,
      DynamicFeeCalculatedEvent.OutputTuple,
      DynamicFeeCalculatedEvent.OutputObject
    >;
    DynamicFeeCalculated: TypedContractEvent<
      DynamicFeeCalculatedEvent.InputTuple,
      DynamicFeeCalculatedEvent.OutputTuple,
      DynamicFeeCalculatedEvent.OutputObject
    >;

    "FeeCollected(address,uint256,uint256,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceOracleUpdated(address,address)": TypedContractEvent<
      PriceOracleUpdatedEvent.InputTuple,
      PriceOracleUpdatedEvent.OutputTuple,
      PriceOracleUpdatedEvent.OutputObject
    >;
    PriceOracleUpdated: TypedContractEvent<
      PriceOracleUpdatedEvent.InputTuple,
      PriceOracleUpdatedEvent.OutputTuple,
      PriceOracleUpdatedEvent.OutputObject
    >;

    "PricingConfigUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PricingConfigUpdatedEvent.InputTuple,
      PricingConfigUpdatedEvent.OutputTuple,
      PricingConfigUpdatedEvent.OutputObject
    >;
    PricingConfigUpdated: TypedContractEvent<
      PricingConfigUpdatedEvent.InputTuple,
      PricingConfigUpdatedEvent.OutputTuple,
      PricingConfigUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
