/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainlinkVRF {
  export type RandomnessRequestStruct = {
    gameId: BigNumberish;
    gameType: string;
    fulfilled: boolean;
    randomWords: BigNumberish[];
    eligiblePlayers: AddressLike[];
  };

  export type RandomnessRequestStructOutput = [
    gameId: bigint,
    gameType: string,
    fulfilled: boolean,
    randomWords: bigint[],
    eligiblePlayers: string[]
  ] & {
    gameId: bigint;
    gameType: string;
    fulfilled: boolean;
    randomWords: bigint[];
    eligiblePlayers: string[];
  };
}

export interface ChainlinkVRFInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAILY_WINNERS_COUNT"
      | "WEEKLY_WINNERS_COUNT"
      | "emergencyWithdraw"
      | "fundSubscription"
      | "getRequest"
      | "getVRFConfig"
      | "isRequestFulfilled"
      | "owner"
      | "pizzaPartyContract"
      | "randomnessRequests"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "requestCounter"
      | "requestDailyRandomness"
      | "requestWeeklyRandomness"
      | "setPizzaPartyContract"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyWithdraw"
      | "OwnershipTransferred"
      | "RandomnessRequested"
      | "SubscriptionFunded"
      | "WinnersSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DAILY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVRFConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestFulfilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pizzaPartyContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDailyRandomness",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWeeklyRandomness",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPizzaPartyContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAILY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVRFConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequestFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pizzaPartyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDailyRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWeeklyRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPizzaPartyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    gameId: BigNumberish,
    gameType: string
  ];
  export type OutputTuple = [
    requestId: bigint,
    gameId: bigint,
    gameType: string
  ];
  export interface OutputObject {
    requestId: bigint;
    gameId: bigint;
    gameType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedEvent {
  export type InputTuple = [subscriptionId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [subscriptionId: bigint, amount: bigint];
  export interface OutputObject {
    subscriptionId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    gameType: string,
    winners: AddressLike[],
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [
    gameId: bigint,
    gameType: string,
    winners: string[],
    randomWords: bigint[]
  ];
  export interface OutputObject {
    gameId: bigint;
    gameType: string;
    winners: string[];
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainlinkVRF extends BaseContract {
  connect(runner?: ContractRunner | null): ChainlinkVRF;
  waitForDeployment(): Promise<this>;

  interface: ChainlinkVRFInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAILY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  WEEKLY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundSubscription: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [ChainlinkVRF.RandomnessRequestStructOutput],
    "view"
  >;

  getVRFConfig: TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, bigint, bigint] & {
        coordinator: string;
        subId: bigint;
        keyHash: string;
        gasLimit: bigint;
        confirmations: bigint;
        words: bigint;
      }
    ],
    "view"
  >;

  isRequestFulfilled: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pizzaPartyContract: TypedContractMethod<[], [string], "view">;

  randomnessRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        gameId: bigint;
        gameType: string;
        fulfilled: boolean;
      }
    ],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestCounter: TypedContractMethod<[], [bigint], "view">;

  requestDailyRandomness: TypedContractMethod<
    [gameId: BigNumberish, eligiblePlayers: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  requestWeeklyRandomness: TypedContractMethod<
    [gameId: BigNumberish, eligiblePlayers: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  setPizzaPartyContract: TypedContractMethod<
    [_pizzaPartyContract: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAILY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEKLY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundSubscription"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [ChainlinkVRF.RandomnessRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVRFConfig"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, bigint, bigint] & {
        coordinator: string;
        subId: bigint;
        keyHash: string;
        gasLimit: bigint;
        confirmations: bigint;
        words: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRequestFulfilled"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pizzaPartyContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomnessRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        gameId: bigint;
        gameType: string;
        fulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestDailyRandomness"
  ): TypedContractMethod<
    [gameId: BigNumberish, eligiblePlayers: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWeeklyRandomness"
  ): TypedContractMethod<
    [gameId: BigNumberish, eligiblePlayers: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPizzaPartyContract"
  ): TypedContractMethod<
    [_pizzaPartyContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFunded"
  ): TypedContractEvent<
    SubscriptionFundedEvent.InputTuple,
    SubscriptionFundedEvent.OutputTuple,
    SubscriptionFundedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersSelected"
  ): TypedContractEvent<
    WinnersSelectedEvent.InputTuple,
    WinnersSelectedEvent.OutputTuple,
    WinnersSelectedEvent.OutputObject
  >;

  filters: {
    "EmergencyWithdraw(address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint256,string)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "SubscriptionFunded(uint64,uint256)": TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
    SubscriptionFunded: TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;

    "WinnersSelected(uint256,string,address[],uint256[])": TypedContractEvent<
      WinnersSelectedEvent.InputTuple,
      WinnersSelectedEvent.OutputTuple,
      WinnersSelectedEvent.OutputObject
    >;
    WinnersSelected: TypedContractEvent<
      WinnersSelectedEvent.InputTuple,
      WinnersSelectedEvent.OutputTuple,
      WinnersSelectedEvent.OutputObject
    >;
  };
}
