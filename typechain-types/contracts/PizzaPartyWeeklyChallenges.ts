/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyWeeklyChallenges {
  export type UserChallengeDataStruct = {
    totalChallengesCompleted: BigNumberish;
    totalRewardsEarned: BigNumberish;
    currentStreak: BigNumberish;
    longestStreak: BigNumberish;
    lastCompletionTime: BigNumberish;
    reputation: BigNumberish;
    isActive: boolean;
  };

  export type UserChallengeDataStructOutput = [
    totalChallengesCompleted: bigint,
    totalRewardsEarned: bigint,
    currentStreak: bigint,
    longestStreak: bigint,
    lastCompletionTime: bigint,
    reputation: bigint,
    isActive: boolean
  ] & {
    totalChallengesCompleted: bigint;
    totalRewardsEarned: bigint;
    currentStreak: bigint;
    longestStreak: bigint;
    lastCompletionTime: bigint;
    reputation: bigint;
    isActive: boolean;
  };

  export type ChallengeCompletionStruct = {
    challengeId: BigNumberish;
    player: AddressLike;
    completionTime: BigNumberish;
    rewardAmount: BigNumberish;
    proof: string;
    isVerified: boolean;
  };

  export type ChallengeCompletionStructOutput = [
    challengeId: bigint,
    player: string,
    completionTime: bigint,
    rewardAmount: bigint,
    proof: string,
    isVerified: boolean
  ] & {
    challengeId: bigint;
    player: string;
    completionTime: bigint;
    rewardAmount: bigint;
    proof: string;
    isVerified: boolean;
  };
}

export interface PizzaPartyWeeklyChallengesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHALLENGE_DURATION"
      | "MAX_PARTICIPANTS"
      | "MAX_REWARD_AMOUNT"
      | "MIN_REWARD_AMOUNT"
      | "STREAK_BONUS_MULTIPLIER"
      | "activeUsers"
      | "blacklistedUsers"
      | "categoryChallengeCount"
      | "challengeCategories"
      | "challenges"
      | "completeChallenge"
      | "createChallenge"
      | "currentChallengeId"
      | "emergencyPause"
      | "emergencyWithdraw"
      | "getChallengeCategories"
      | "getChallengeInfo"
      | "getChallengeParticipants"
      | "getUserChallengeData"
      | "getUserCompletions"
      | "joinChallenge"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setUserBlacklist"
      | "totalChallenges"
      | "totalChallengesCompleted"
      | "totalParticipants"
      | "totalRewardsDistributed"
      | "transferOwnership"
      | "updateChallengeStatus"
      | "userChallengeData"
      | "userCompletions"
      | "vmfToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CategoryCreated"
      | "ChallengeCompleted"
      | "ChallengeCreated"
      | "ChallengeJoined"
      | "OwnershipTransferred"
      | "Paused"
      | "StreakUpdated"
      | "Unpaused"
      | "UserBlacklisted"
      | "WeeklyChallengeCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PARTICIPANTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_BONUS_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryChallengeCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeChallenge",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChallenge",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentChallengeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserChallengeData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCompletions",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalChallenges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalChallengesCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChallengeStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userChallengeData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCompletions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PARTICIPANTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_BONUS_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoryChallengeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentChallengeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserChallengeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCompletions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalChallengesCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChallengeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userChallengeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCompletions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
}

export namespace CategoryCreatedEvent {
  export type InputTuple = [category: string];
  export type OutputTuple = [category: string];
  export interface OutputObject {
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeCompletedEvent {
  export type InputTuple = [
    challengeId: BigNumberish,
    player: AddressLike,
    rewardAmount: BigNumberish,
    completionTime: BigNumberish
  ];
  export type OutputTuple = [
    challengeId: bigint,
    player: string,
    rewardAmount: bigint,
    completionTime: bigint
  ];
  export interface OutputObject {
    challengeId: bigint;
    player: string;
    rewardAmount: bigint;
    completionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeCreatedEvent {
  export type InputTuple = [
    challengeId: BigNumberish,
    title: string,
    category: string,
    rewardAmount: BigNumberish,
    difficulty: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    challengeId: bigint,
    title: string,
    category: string,
    rewardAmount: bigint,
    difficulty: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    challengeId: bigint;
    title: string;
    category: string;
    rewardAmount: bigint;
    difficulty: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeJoinedEvent {
  export type InputTuple = [
    challengeId: BigNumberish,
    player: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    challengeId: bigint,
    player: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    challengeId: bigint;
    player: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreakUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    oldStreak: BigNumberish,
    newStreak: BigNumberish,
    bonusAmount: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    oldStreak: bigint,
    newStreak: bigint,
    bonusAmount: bigint
  ];
  export interface OutputObject {
    player: string;
    oldStreak: bigint;
    newStreak: bigint;
    bonusAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlacklistedEvent {
  export type InputTuple = [user: AddressLike, blacklisted: boolean];
  export type OutputTuple = [user: string, blacklisted: boolean];
  export interface OutputObject {
    user: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyChallengeCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    challengeId: BigNumberish,
    reward: BigNumberish,
    streak: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    challengeId: bigint,
    reward: bigint,
    streak: bigint
  ];
  export interface OutputObject {
    player: string;
    challengeId: bigint;
    reward: bigint;
    streak: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyWeeklyChallenges extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyWeeklyChallenges;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyWeeklyChallengesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHALLENGE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_PARTICIPANTS: TypedContractMethod<[], [bigint], "view">;

  MAX_REWARD_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_REWARD_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  STREAK_BONUS_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  activeUsers: TypedContractMethod<[], [bigint], "view">;

  blacklistedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  categoryChallengeCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  challengeCategories: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  challenges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        challengeId: bigint;
        title: string;
        description: string;
        rewardAmount: bigint;
        difficulty: bigint;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
        isCompleted: boolean;
        category: string;
      }
    ],
    "view"
  >;

  completeChallenge: TypedContractMethod<
    [challengeId: BigNumberish, proof: string],
    [void],
    "nonpayable"
  >;

  createChallenge: TypedContractMethod<
    [
      title: string,
      description: string,
      rewardAmount: BigNumberish,
      difficulty: BigNumberish,
      category: string,
      maxParticipants: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  currentChallengeId: TypedContractMethod<[], [bigint], "view">;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getChallengeCategories: TypedContractMethod<[], [string[]], "view">;

  getChallengeInfo: TypedContractMethod<
    [challengeId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        title: string;
        description: string;
        rewardAmount: bigint;
        difficulty: bigint;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
        isCompleted: boolean;
        category: string;
      }
    ],
    "view"
  >;

  getChallengeParticipants: TypedContractMethod<
    [challengeId: BigNumberish],
    [string[]],
    "view"
  >;

  getUserChallengeData: TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyWeeklyChallenges.UserChallengeDataStructOutput],
    "view"
  >;

  getUserCompletions: TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyWeeklyChallenges.ChallengeCompletionStructOutput[]],
    "view"
  >;

  joinChallenge: TypedContractMethod<
    [challengeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setUserBlacklist: TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  totalChallenges: TypedContractMethod<[], [bigint], "view">;

  totalChallengesCompleted: TypedContractMethod<[], [bigint], "view">;

  totalParticipants: TypedContractMethod<[], [bigint], "view">;

  totalRewardsDistributed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateChallengeStatus: TypedContractMethod<
    [challengeId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  userChallengeData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalChallengesCompleted: bigint;
        totalRewardsEarned: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
        lastCompletionTime: bigint;
        reputation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  userCompletions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, boolean] & {
        challengeId: bigint;
        player: string;
        completionTime: bigint;
        rewardAmount: bigint;
        proof: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHALLENGE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PARTICIPANTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REWARD_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REWARD_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_BONUS_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "categoryChallengeCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengeCategories"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        challengeId: bigint;
        title: string;
        description: string;
        rewardAmount: bigint;
        difficulty: bigint;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
        isCompleted: boolean;
        category: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeChallenge"
  ): TypedContractMethod<
    [challengeId: BigNumberish, proof: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createChallenge"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      rewardAmount: BigNumberish,
      difficulty: BigNumberish,
      category: string,
      maxParticipants: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentChallengeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getChallengeCategories"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getChallengeInfo"
  ): TypedContractMethod<
    [challengeId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        title: string;
        description: string;
        rewardAmount: bigint;
        difficulty: bigint;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        isActive: boolean;
        isCompleted: boolean;
        category: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChallengeParticipants"
  ): TypedContractMethod<[challengeId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserChallengeData"
  ): TypedContractMethod<
    [user: AddressLike],
    [PizzaPartyWeeklyChallenges.UserChallengeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCompletions"
  ): TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [PizzaPartyWeeklyChallenges.ChallengeCompletionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinChallenge"
  ): TypedContractMethod<[challengeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserBlacklist"
  ): TypedContractMethod<
    [user: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalChallenges"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalChallengesCompleted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalParticipants"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewardsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateChallengeStatus"
  ): TypedContractMethod<
    [challengeId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userChallengeData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalChallengesCompleted: bigint;
        totalRewardsEarned: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
        lastCompletionTime: bigint;
        reputation: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userCompletions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, boolean] & {
        challengeId: bigint;
        player: string;
        completionTime: bigint;
        rewardAmount: bigint;
        proof: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CategoryCreated"
  ): TypedContractEvent<
    CategoryCreatedEvent.InputTuple,
    CategoryCreatedEvent.OutputTuple,
    CategoryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeCompleted"
  ): TypedContractEvent<
    ChallengeCompletedEvent.InputTuple,
    ChallengeCompletedEvent.OutputTuple,
    ChallengeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeCreated"
  ): TypedContractEvent<
    ChallengeCreatedEvent.InputTuple,
    ChallengeCreatedEvent.OutputTuple,
    ChallengeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeJoined"
  ): TypedContractEvent<
    ChallengeJoinedEvent.InputTuple,
    ChallengeJoinedEvent.OutputTuple,
    ChallengeJoinedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "StreakUpdated"
  ): TypedContractEvent<
    StreakUpdatedEvent.InputTuple,
    StreakUpdatedEvent.OutputTuple,
    StreakUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserBlacklisted"
  ): TypedContractEvent<
    UserBlacklistedEvent.InputTuple,
    UserBlacklistedEvent.OutputTuple,
    UserBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyChallengeCompleted"
  ): TypedContractEvent<
    WeeklyChallengeCompletedEvent.InputTuple,
    WeeklyChallengeCompletedEvent.OutputTuple,
    WeeklyChallengeCompletedEvent.OutputObject
  >;

  filters: {
    "CategoryCreated(string)": TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;
    CategoryCreated: TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;

    "ChallengeCompleted(uint256,address,uint256,uint256)": TypedContractEvent<
      ChallengeCompletedEvent.InputTuple,
      ChallengeCompletedEvent.OutputTuple,
      ChallengeCompletedEvent.OutputObject
    >;
    ChallengeCompleted: TypedContractEvent<
      ChallengeCompletedEvent.InputTuple,
      ChallengeCompletedEvent.OutputTuple,
      ChallengeCompletedEvent.OutputObject
    >;

    "ChallengeCreated(uint256,string,string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ChallengeCreatedEvent.InputTuple,
      ChallengeCreatedEvent.OutputTuple,
      ChallengeCreatedEvent.OutputObject
    >;
    ChallengeCreated: TypedContractEvent<
      ChallengeCreatedEvent.InputTuple,
      ChallengeCreatedEvent.OutputTuple,
      ChallengeCreatedEvent.OutputObject
    >;

    "ChallengeJoined(uint256,address,uint256)": TypedContractEvent<
      ChallengeJoinedEvent.InputTuple,
      ChallengeJoinedEvent.OutputTuple,
      ChallengeJoinedEvent.OutputObject
    >;
    ChallengeJoined: TypedContractEvent<
      ChallengeJoinedEvent.InputTuple,
      ChallengeJoinedEvent.OutputTuple,
      ChallengeJoinedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "StreakUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;
    StreakUpdated: TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserBlacklisted(address,bool)": TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
    UserBlacklisted: TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;

    "WeeklyChallengeCompleted(address,uint256,uint256,uint256)": TypedContractEvent<
      WeeklyChallengeCompletedEvent.InputTuple,
      WeeklyChallengeCompletedEvent.OutputTuple,
      WeeklyChallengeCompletedEvent.OutputObject
    >;
    WeeklyChallengeCompleted: TypedContractEvent<
      WeeklyChallengeCompletedEvent.InputTuple,
      WeeklyChallengeCompletedEvent.OutputTuple,
      WeeklyChallengeCompletedEvent.OutputObject
    >;
  };
}
