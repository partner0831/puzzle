/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FreeRandomness {
  export type EntropySourceStruct = {
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
    difficulty: BigNumberish;
    gasLimit: BigNumberish;
    gasUsed: BigNumberish;
    baseFee: BigNumberish;
    miner: AddressLike;
  };

  export type EntropySourceStructOutput = [
    blockNumber: bigint,
    timestamp: bigint,
    difficulty: bigint,
    gasLimit: bigint,
    gasUsed: bigint,
    baseFee: bigint,
    miner: string
  ] & {
    blockNumber: bigint;
    timestamp: bigint;
    difficulty: bigint;
    gasLimit: bigint;
    gasUsed: bigint;
    baseFee: bigint;
    miner: string;
  };
}

export interface FreeRandomnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitPhaseDuration"
      | "commits"
      | "currentRoundId"
      | "forceFinalize"
      | "getCurrentRandomnessRound"
      | "getFinalRandomNumber"
      | "getRoundContributors"
      | "getRoundInfo"
      | "maxContributors"
      | "minContributors"
      | "owner"
      | "randomnessRounds"
      | "renounceOwnership"
      | "requestRandomness"
      | "revealPhaseDuration"
      | "revealRandomness"
      | "roundContributors"
      | "submitCommitment"
      | "transferOwnership"
      | "updateRoundParameters"
      | "userContributions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitmentSubmitted"
      | "EntropyCollected"
      | "OwnershipTransferred"
      | "RandomnessFinalized"
      | "RandomnessRequested"
      | "RandomnessRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commitPhaseDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceFinalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandomnessRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundContributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContributors",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPhaseDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealRandomness",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roundContributors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitCommitment",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoundParameters",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userContributions",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitPhaseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandomnessRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPhaseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoundParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContributions",
    data: BytesLike
  ): Result;
}

export namespace CommitmentSubmittedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    contributor: AddressLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    roundId: bigint,
    contributor: string,
    commitment: string
  ];
  export interface OutputObject {
    roundId: bigint;
    contributor: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntropyCollectedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    entropy: FreeRandomness.EntropySourceStruct
  ];
  export type OutputTuple = [
    roundId: bigint,
    entropy: FreeRandomness.EntropySourceStructOutput
  ];
  export interface OutputObject {
    roundId: bigint;
    entropy: FreeRandomness.EntropySourceStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessFinalizedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    finalRandomNumber: BigNumberish,
    totalContributors: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    finalRandomNumber: bigint,
    totalContributors: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    finalRandomNumber: bigint;
    totalContributors: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [roundId: BigNumberish, requester: AddressLike];
  export type OutputTuple = [roundId: bigint, requester: string];
  export interface OutputObject {
    roundId: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRevealedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    contributor: AddressLike,
    randomValue: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    contributor: string,
    randomValue: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    contributor: string;
    randomValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FreeRandomness extends BaseContract {
  connect(runner?: ContractRunner | null): FreeRandomness;
  waitForDeployment(): Promise<this>;

  interface: FreeRandomnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitPhaseDuration: TypedContractMethod<[], [bigint], "view">;

  commits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        commitment: string;
        timestamp: bigint;
        revealed: boolean;
        randomValue: bigint;
      }
    ],
    "view"
  >;

  currentRoundId: TypedContractMethod<[], [bigint], "view">;

  forceFinalize: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentRandomnessRound: TypedContractMethod<[], [bigint], "view">;

  getFinalRandomNumber: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoundContributors: TypedContractMethod<
    [roundId: BigNumberish],
    [string[]],
    "view"
  >;

  getRoundInfo: TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        totalContributors: bigint;
        totalEntropy: bigint;
        finalRandomNumber: bigint;
        isComplete: boolean;
        deadline: bigint;
      }
    ],
    "view"
  >;

  maxContributors: TypedContractMethod<[], [bigint], "view">;

  minContributors: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  randomnessRounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        roundId: bigint;
        totalContributors: bigint;
        totalEntropy: bigint;
        finalRandomNumber: bigint;
        isComplete: boolean;
        deadline: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestRandomness: TypedContractMethod<[], [bigint], "nonpayable">;

  revealPhaseDuration: TypedContractMethod<[], [bigint], "view">;

  revealRandomness: TypedContractMethod<
    [roundId: BigNumberish, randomValue: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  roundContributors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  submitCommitment: TypedContractMethod<
    [roundId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRoundParameters: TypedContractMethod<
    [
      _commitPhaseDuration: BigNumberish,
      _revealPhaseDuration: BigNumberish,
      _minContributors: BigNumberish,
      _maxContributors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userContributions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitPhaseDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        commitment: string;
        timestamp: bigint;
        revealed: boolean;
        randomValue: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceFinalize"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentRandomnessRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFinalRandomNumber"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundContributors"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoundInfo"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        totalContributors: bigint;
        totalEntropy: bigint;
        finalRandomNumber: bigint;
        isComplete: boolean;
        deadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxContributors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minContributors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomnessRounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        roundId: bigint;
        totalContributors: bigint;
        totalEntropy: bigint;
        finalRandomNumber: bigint;
        isComplete: boolean;
        deadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRandomness"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "revealPhaseDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealRandomness"
  ): TypedContractMethod<
    [roundId: BigNumberish, randomValue: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roundContributors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitCommitment"
  ): TypedContractMethod<
    [roundId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRoundParameters"
  ): TypedContractMethod<
    [
      _commitPhaseDuration: BigNumberish,
      _revealPhaseDuration: BigNumberish,
      _minContributors: BigNumberish,
      _maxContributors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userContributions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "CommitmentSubmitted"
  ): TypedContractEvent<
    CommitmentSubmittedEvent.InputTuple,
    CommitmentSubmittedEvent.OutputTuple,
    CommitmentSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "EntropyCollected"
  ): TypedContractEvent<
    EntropyCollectedEvent.InputTuple,
    EntropyCollectedEvent.OutputTuple,
    EntropyCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessFinalized"
  ): TypedContractEvent<
    RandomnessFinalizedEvent.InputTuple,
    RandomnessFinalizedEvent.OutputTuple,
    RandomnessFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRevealed"
  ): TypedContractEvent<
    RandomnessRevealedEvent.InputTuple,
    RandomnessRevealedEvent.OutputTuple,
    RandomnessRevealedEvent.OutputObject
  >;

  filters: {
    "CommitmentSubmitted(uint256,address,bytes32)": TypedContractEvent<
      CommitmentSubmittedEvent.InputTuple,
      CommitmentSubmittedEvent.OutputTuple,
      CommitmentSubmittedEvent.OutputObject
    >;
    CommitmentSubmitted: TypedContractEvent<
      CommitmentSubmittedEvent.InputTuple,
      CommitmentSubmittedEvent.OutputTuple,
      CommitmentSubmittedEvent.OutputObject
    >;

    "EntropyCollected(uint256,tuple)": TypedContractEvent<
      EntropyCollectedEvent.InputTuple,
      EntropyCollectedEvent.OutputTuple,
      EntropyCollectedEvent.OutputObject
    >;
    EntropyCollected: TypedContractEvent<
      EntropyCollectedEvent.InputTuple,
      EntropyCollectedEvent.OutputTuple,
      EntropyCollectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RandomnessFinalized(uint256,uint256,uint256)": TypedContractEvent<
      RandomnessFinalizedEvent.InputTuple,
      RandomnessFinalizedEvent.OutputTuple,
      RandomnessFinalizedEvent.OutputObject
    >;
    RandomnessFinalized: TypedContractEvent<
      RandomnessFinalizedEvent.InputTuple,
      RandomnessFinalizedEvent.OutputTuple,
      RandomnessFinalizedEvent.OutputObject
    >;

    "RandomnessRequested(uint256,address)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RandomnessRevealed(uint256,address,uint256)": TypedContractEvent<
      RandomnessRevealedEvent.InputTuple,
      RandomnessRevealedEvent.OutputTuple,
      RandomnessRevealedEvent.OutputObject
    >;
    RandomnessRevealed: TypedContractEvent<
      RandomnessRevealedEvent.InputTuple,
      RandomnessRevealedEvent.OutputTuple,
      RandomnessRevealedEvent.OutputObject
    >;
  };
}
