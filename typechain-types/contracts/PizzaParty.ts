/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaParty {
  export type GameStruct = {
    gameId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    totalEntries: BigNumberish;
    jackpotAmount: BigNumberish;
    winners: AddressLike[];
    isCompleted: boolean;
    randomnessRoundId: BigNumberish;
  };

  export type GameStructOutput = [
    gameId: bigint,
    startTime: bigint,
    endTime: bigint,
    totalEntries: bigint,
    jackpotAmount: bigint,
    winners: string[],
    isCompleted: boolean,
    randomnessRoundId: bigint
  ] & {
    gameId: bigint;
    startTime: bigint;
    endTime: bigint;
    totalEntries: bigint;
    jackpotAmount: bigint;
    winners: string[];
    isCompleted: boolean;
    randomnessRoundId: bigint;
  };

  export type PlayerStruct = {
    totalToppings: BigNumberish;
    dailyEntries: BigNumberish;
    weeklyEntries: BigNumberish;
    lastEntryTime: BigNumberish;
    streakDays: BigNumberish;
    lastStreakUpdate: BigNumberish;
    isBlacklisted: boolean;
    lastVMFHoldingsCheck: BigNumberish;
    loyaltyPoints: BigNumberish;
    totalOrders: BigNumberish;
    weeklyChallengesCompleted: BigNumberish;
    jackpotEntries: BigNumberish;
    lastRewardClaim: BigNumberish;
    hasCompletedFirstOrder: boolean;
    dailyRewardsClaimed: BigNumberish;
    lastSecurityCheck: BigNumberish;
    isRateLimited: boolean;
  };

  export type PlayerStructOutput = [
    totalToppings: bigint,
    dailyEntries: bigint,
    weeklyEntries: bigint,
    lastEntryTime: bigint,
    streakDays: bigint,
    lastStreakUpdate: bigint,
    isBlacklisted: boolean,
    lastVMFHoldingsCheck: bigint,
    loyaltyPoints: bigint,
    totalOrders: bigint,
    weeklyChallengesCompleted: bigint,
    jackpotEntries: bigint,
    lastRewardClaim: bigint,
    hasCompletedFirstOrder: boolean,
    dailyRewardsClaimed: bigint,
    lastSecurityCheck: bigint,
    isRateLimited: boolean
  ] & {
    totalToppings: bigint;
    dailyEntries: bigint;
    weeklyEntries: bigint;
    lastEntryTime: bigint;
    streakDays: bigint;
    lastStreakUpdate: bigint;
    isBlacklisted: boolean;
    lastVMFHoldingsCheck: bigint;
    loyaltyPoints: bigint;
    totalOrders: bigint;
    weeklyChallengesCompleted: bigint;
    jackpotEntries: bigint;
    lastRewardClaim: bigint;
    hasCompletedFirstOrder: boolean;
    dailyRewardsClaimed: bigint;
    lastSecurityCheck: bigint;
    isRateLimited: boolean;
  };

  export type ReferralStruct = {
    referrer: AddressLike;
    totalReferrals: BigNumberish;
    totalRewards: BigNumberish;
    isActive: boolean;
  };

  export type ReferralStructOutput = [
    referrer: string,
    totalReferrals: bigint,
    totalRewards: bigint,
    isActive: boolean
  ] & {
    referrer: string;
    totalReferrals: bigint;
    totalRewards: bigint;
    isActive: boolean;
  };
}

export interface PizzaPartyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "AUDITOR_ROLE"
      | "BASE_SEPOLIA_HOLDING_REWARD"
      | "BATCH_SIZE"
      | "DAILY_PLAY_REWARD"
      | "DAILY_WINNERS_COUNT"
      | "DOLLAR_ENTRY_FEE"
      | "EMERGENCY_ROLE"
      | "ENTRY_COOLDOWN"
      | "FIRST_ORDER_REWARD"
      | "GAS_OPTIMIZATION_INTERVAL"
      | "JACKPOT_ENTRY_COST"
      | "JACKPOT_MULTIPLIER"
      | "LOYALTY_POINTS_PER_DOLLAR"
      | "MAX_DAILY_ENTRIES"
      | "MAX_DAILY_REWARDS"
      | "MAX_JACKPOT_ENTRIES"
      | "MAX_PRICE_DEVIATION"
      | "MAX_REFERRAL_CODE_LENGTH"
      | "MAX_REWARD_AMOUNT"
      | "MIN_BASE_SEPOLIA_HOLDING"
      | "MIN_REFERRAL_CODE_LENGTH"
      | "OPERATOR_ROLE"
      | "PRICE_UPDATE_THRESHOLD"
      | "REFERRAL_REWARD"
      | "STREAK_BONUS"
      | "WEEKLY_WINNERS_COUNT"
      | "addJackpotEntry"
      | "awardBaseSepoliaHoldingsToppings"
      | "awardLoyaltyPoints"
      | "awardStreakBonus"
      | "batchProcessingActive"
      | "batchProcessingNonce"
      | "blacklistedAddresses"
      | "claimFirstOrderReward"
      | "claimWeeklyChallengeReward"
      | "contributeEntropy"
      | "createReferralCode"
      | "currentDailyJackpot"
      | "currentRandomnessRound"
      | "currentWeeklyJackpot"
      | "dailyPlayerCount"
      | "dailyPlayers"
      | "drawDailyWinners"
      | "drawWeeklyWinners"
      | "emergencyPause"
      | "emergencyUnlockGame"
      | "emergencyWithdraw"
      | "enterDailyGame"
      | "entropyContributions"
      | "entropyContributors"
      | "entropyRoundId"
      | "gameStateLocked"
      | "games"
      | "gasOptimizationThreshold"
      | "generateSecureRandomness"
      | "getCurrentEntryFee"
      | "getCurrentGame"
      | "getCurrentGameId"
      | "getCurrentVMFPrice"
      | "getEligibleDailyPlayers"
      | "getEligibleWeeklyPlayers"
      | "getGame"
      | "getGasUsageStats"
      | "getJackpotState"
      | "getPlayerInfo"
      | "getReferralInfo"
      | "grantRole"
      | "hasEnteredToday"
      | "hasRole"
      | "isDailyDrawReady"
      | "isWeeklyDrawReady"
      | "jackpotStateHash"
      | "jackpotUpdateCooldown"
      | "jackpotUpdateNonce"
      | "lastDailyDraw"
      | "lastEntropyUpdate"
      | "lastGasOptimization"
      | "lastJackpotUpdate"
      | "lastWeeklyDraw"
      | "optimizeGasUsage"
      | "owner"
      | "paused"
      | "pendingWinners"
      | "players"
      | "priceOracle"
      | "processBatchPlayers"
      | "processDailyWinners"
      | "processWeeklyWinners"
      | "randomnessContract"
      | "randomnessSeeds"
      | "referralCodes"
      | "referrals"
      | "renounceOwnership"
      | "requestDailyRandomness"
      | "requestDailyVRF"
      | "requestWeeklyVRF"
      | "revealRandomness"
      | "revokeRole"
      | "roleAdmins"
      | "roles"
      | "selectDailyWinners"
      | "setJackpotUpdateCooldown"
      | "setPlayerBlacklist"
      | "setRoleAdmin"
      | "setUseVRF"
      | "setVRFContract"
      | "submitRandomnessCommitment"
      | "transferOwnership"
      | "updateJackpotAtomic"
      | "useVRF"
      | "userDailyRewards"
      | "userLastActivity"
      | "userRateLimitEnd"
      | "vmfToken"
      | "vrfContract"
      | "vrfRequests"
      | "weeklyChallenges"
      | "weeklyPlayerCount"
      | "weeklyPlayers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchPlayersProcessed"
      | "DailyWinnersSelected"
      | "DynamicEntryFeeCalculated"
      | "EmergencyPause"
      | "EntropyContributed"
      | "FirstOrderRewardClaimed"
      | "GameStateUnlocked"
      | "GasOptimizationCompleted"
      | "JackpotEntryAdded"
      | "JackpotUpdateCooldownSet"
      | "JackpotUpdated"
      | "JackpotUpdatedAtomic"
      | "LoyaltyPointsAwarded"
      | "OwnershipTransferred"
      | "Paused"
      | "PlayerBlacklisted"
      | "PlayerEntered"
      | "RandomnessRequested"
      | "RateLimitTriggered"
      | "ReferralCreated"
      | "ReferralProcessed"
      | "RoleAdminSet"
      | "RoleGranted"
      | "RoleRevoked"
      | "SecureRandomnessGenerated"
      | "ToppingsAwarded"
      | "Unpaused"
      | "VRFRequestSubmitted"
      | "WeeklyChallengeCompleted"
      | "WeeklyWinnersSelected"
      | "WinnersSelectedWithRandomness"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_SEPOLIA_HOLDING_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAILY_PLAY_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAILY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLLAR_ENTRY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENTRY_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIRST_ORDER_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAS_OPTIMIZATION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JACKPOT_ENTRY_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JACKPOT_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOYALTY_POINTS_PER_DOLLAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_ENTRIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_JACKPOT_ENTRIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REFERRAL_CODE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BASE_SEPOLIA_HOLDING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REFERRAL_CODE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_UPDATE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addJackpotEntry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardBaseSepoliaHoldingsToppings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardLoyaltyPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardStreakBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchProcessingActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchProcessingNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFirstOrderReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimWeeklyChallengeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeEntropy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRandomnessRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentWeeklyJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPlayerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDailyWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWeeklyWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlockGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterDailyGame",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "entropyContributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entropyContributors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entropyRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameStateLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "gasOptimizationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateSecureRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVMFPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleDailyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleWeeklyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasUsageStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJackpotState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnteredToday",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDailyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWeeklyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotStateHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotUpdateCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jackpotUpdateNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDailyDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEntropyUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastGasOptimization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastJackpotUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWeeklyDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimizeGasUsage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWinners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processBatchPlayers",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processDailyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processWeeklyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessSeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDailyRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDailyVRF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWeeklyVRF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealRandomness",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAdmins",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectDailyWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setJackpotUpdateCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayerBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUseVRF", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setVRFContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRandomnessCommitment",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJackpotAtomic",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "useVRF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDailyRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRateLimitEnd",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vrfContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyChallenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyPlayerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_SEPOLIA_HOLDING_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BATCH_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DAILY_PLAY_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAILY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLLAR_ENTRY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENTRY_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIRST_ORDER_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAS_OPTIMIZATION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JACKPOT_ENTRY_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JACKPOT_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOYALTY_POINTS_PER_DOLLAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_ENTRIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_JACKPOT_ENTRIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REFERRAL_CODE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BASE_SEPOLIA_HOLDING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REFERRAL_CODE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_UPDATE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addJackpotEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardBaseSepoliaHoldingsToppings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardStreakBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchProcessingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchProcessingNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFirstOrderReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWeeklyChallengeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeEntropy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRandomnessRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentWeeklyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawDailyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawWeeklyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlockGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterDailyGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entropyContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entropyContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entropyRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameStateLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasOptimizationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSecureRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVMFPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleDailyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleWeeklyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasUsageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJackpotState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasEnteredToday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDailyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWeeklyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotStateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotUpdateCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jackpotUpdateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDailyDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEntropyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastGasOptimization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastJackpotUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWeeklyDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimizeGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processBatchPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processDailyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWeeklyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDailyRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDailyVRF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWeeklyVRF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectDailyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJackpotUpdateCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayerBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUseVRF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVRFContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRandomnessCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJackpotAtomic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useVRF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDailyRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRateLimitEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyPlayers",
    data: BytesLike
  ): Result;
}

export namespace BatchPlayersProcessedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    totalProcessed: BigNumberish,
    totalPlayers: BigNumberish
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    totalProcessed: bigint,
    totalPlayers: bigint
  ];
  export interface OutputObject {
    blockNumber: bigint;
    totalProcessed: bigint;
    totalPlayers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyWinnersSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winners: AddressLike[],
    jackpot: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winners: string[],
    jackpot: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
    jackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicEntryFeeCalculatedEvent {
  export type InputTuple = [
    vmfPrice: BigNumberish,
    requiredVMF: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    vmfPrice: bigint,
    requiredVMF: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    vmfPrice: bigint;
    requiredVMF: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntropyContributedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    entropy: BytesLike,
    roundId: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    entropy: string,
    roundId: bigint
  ];
  export interface OutputObject {
    contributor: string;
    entropy: string;
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstOrderRewardClaimedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStateUnlockedEvent {
  export type InputTuple = [gameId: BigNumberish, sender: AddressLike];
  export type OutputTuple = [gameId: bigint, sender: string];
  export interface OutputObject {
    gameId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasOptimizationCompletedEvent {
  export type InputTuple = [timestamp: BigNumberish, threshold: BigNumberish];
  export type OutputTuple = [timestamp: bigint, threshold: bigint];
  export interface OutputObject {
    timestamp: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotEntryAddedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotUpdateCooldownSetEvent {
  export type InputTuple = [cooldown: BigNumberish];
  export type OutputTuple = [cooldown: bigint];
  export interface OutputObject {
    cooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotUpdatedEvent {
  export type InputTuple = [
    dailyJackpot: BigNumberish,
    weeklyJackpot: BigNumberish
  ];
  export type OutputTuple = [dailyJackpot: bigint, weeklyJackpot: bigint];
  export interface OutputObject {
    dailyJackpot: bigint;
    weeklyJackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotUpdatedAtomicEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    oldAmount: BigNumberish,
    newAmount: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    oldAmount: bigint,
    newAmount: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    oldAmount: bigint;
    newAmount: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoyaltyPointsAwardedEvent {
  export type InputTuple = [
    player: AddressLike,
    points: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [player: string, points: bigint, reason: string];
  export interface OutputObject {
    player: string;
    points: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerBlacklistedEvent {
  export type InputTuple = [player: AddressLike, blacklisted: boolean];
  export type OutputTuple = [player: string, blacklisted: boolean];
  export interface OutputObject {
    player: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerEnteredEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [player: string, gameId: bigint, amount: bigint];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    randomnessRoundId: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, randomnessRoundId: bigint];
  export interface OutputObject {
    gameId: bigint;
    randomnessRoundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateLimitTriggeredEvent {
  export type InputTuple = [user: AddressLike, cooldownEnd: BigNumberish];
  export type OutputTuple = [user: string, cooldownEnd: bigint];
  export interface OutputObject {
    user: string;
    cooldownEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCreatedEvent {
  export type InputTuple = [player: AddressLike, code: string];
  export type OutputTuple = [player: string, code: string];
  export interface OutputObject {
    player: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralProcessedEvent {
  export type InputTuple = [code: string, player: AddressLike];
  export type OutputTuple = [code: string, player: string];
  export interface OutputObject {
    code: string;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminSetEvent {
  export type InputTuple = [role: BytesLike, admin: AddressLike];
  export type OutputTuple = [role: string, admin: string];
  export interface OutputObject {
    role: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecureRandomnessGeneratedEvent {
  export type InputTuple = [roundId: BigNumberish, seed: BytesLike];
  export type OutputTuple = [roundId: bigint, seed: string];
  export interface OutputObject {
    roundId: bigint;
    seed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ToppingsAwardedEvent {
  export type InputTuple = [
    player: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [player: string, amount: bigint, reason: string];
  export interface OutputObject {
    player: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VRFRequestSubmittedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    gameId: BigNumberish,
    gameType: string
  ];
  export type OutputTuple = [
    requestId: bigint,
    gameId: bigint,
    gameType: string
  ];
  export interface OutputObject {
    requestId: bigint;
    gameId: bigint;
    gameType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyChallengeCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    challengeId: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    challengeId: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    player: string;
    challengeId: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyWinnersSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winners: AddressLike[],
    jackpot: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winners: string[],
    jackpot: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
    jackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersSelectedWithRandomnessEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    randomNumber: BigNumberish,
    winners: AddressLike[]
  ];
  export type OutputTuple = [
    gameId: bigint,
    randomNumber: bigint,
    winners: string[]
  ];
  export interface OutputObject {
    gameId: bigint;
    randomNumber: bigint;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaParty extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaParty;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  BASE_SEPOLIA_HOLDING_REWARD: TypedContractMethod<[], [bigint], "view">;

  BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  DAILY_PLAY_REWARD: TypedContractMethod<[], [bigint], "view">;

  DAILY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  DOLLAR_ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  ENTRY_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  FIRST_ORDER_REWARD: TypedContractMethod<[], [bigint], "view">;

  GAS_OPTIMIZATION_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  JACKPOT_ENTRY_COST: TypedContractMethod<[], [bigint], "view">;

  JACKPOT_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  LOYALTY_POINTS_PER_DOLLAR: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_ENTRIES: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_REWARDS: TypedContractMethod<[], [bigint], "view">;

  MAX_JACKPOT_ENTRIES: TypedContractMethod<[], [bigint], "view">;

  MAX_PRICE_DEVIATION: TypedContractMethod<[], [bigint], "view">;

  MAX_REFERRAL_CODE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MAX_REWARD_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_BASE_SEPOLIA_HOLDING: TypedContractMethod<[], [bigint], "view">;

  MIN_REFERRAL_CODE_LENGTH: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PRICE_UPDATE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_REWARD: TypedContractMethod<[], [bigint], "view">;

  STREAK_BONUS: TypedContractMethod<[], [bigint], "view">;

  WEEKLY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  addJackpotEntry: TypedContractMethod<[], [void], "nonpayable">;

  awardBaseSepoliaHoldingsToppings: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  awardLoyaltyPoints: TypedContractMethod<[], [void], "nonpayable">;

  awardStreakBonus: TypedContractMethod<[], [void], "nonpayable">;

  batchProcessingActive: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  batchProcessingNonce: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  blacklistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  claimFirstOrderReward: TypedContractMethod<[], [void], "nonpayable">;

  claimWeeklyChallengeReward: TypedContractMethod<
    [challengeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  contributeEntropy: TypedContractMethod<
    [entropy: BytesLike],
    [void],
    "nonpayable"
  >;

  createReferralCode: TypedContractMethod<[], [void], "nonpayable">;

  currentDailyJackpot: TypedContractMethod<[], [bigint], "view">;

  currentRandomnessRound: TypedContractMethod<[], [bigint], "view">;

  currentWeeklyJackpot: TypedContractMethod<[], [bigint], "view">;

  dailyPlayerCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  dailyPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  drawDailyWinners: TypedContractMethod<[], [void], "nonpayable">;

  drawWeeklyWinners: TypedContractMethod<[], [void], "nonpayable">;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  emergencyUnlockGame: TypedContractMethod<
    [gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  enterDailyGame: TypedContractMethod<
    [referralCode: string],
    [void],
    "nonpayable"
  >;

  entropyContributions: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  entropyContributors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  entropyRoundId: TypedContractMethod<[], [bigint], "view">;

  gameStateLocked: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        gameId: bigint;
        startTime: bigint;
        endTime: bigint;
        totalEntries: bigint;
        jackpotAmount: bigint;
        isCompleted: boolean;
        randomnessRoundId: bigint;
      }
    ],
    "view"
  >;

  gasOptimizationThreshold: TypedContractMethod<[], [bigint], "view">;

  generateSecureRandomness: TypedContractMethod<[], [bigint], "nonpayable">;

  getCurrentEntryFee: TypedContractMethod<[], [bigint], "view">;

  getCurrentGame: TypedContractMethod<
    [],
    [PizzaParty.GameStructOutput],
    "view"
  >;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  getCurrentVMFPrice: TypedContractMethod<[], [bigint], "view">;

  getEligibleDailyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  getEligibleWeeklyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  getGame: TypedContractMethod<
    [gameId: BigNumberish],
    [PizzaParty.GameStructOutput],
    "view"
  >;

  getGasUsageStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        threshold: bigint;
        lastOptimization: bigint;
        batchNonce: bigint;
      }
    ],
    "view"
  >;

  getJackpotState: TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, bigint] & {
        amount: bigint;
        stateHash: string;
        nonce: bigint;
      }
    ],
    "view"
  >;

  getPlayerInfo: TypedContractMethod<
    [player: AddressLike],
    [PizzaParty.PlayerStructOutput],
    "view"
  >;

  getReferralInfo: TypedContractMethod<
    [player: AddressLike],
    [PizzaParty.ReferralStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasEnteredToday: TypedContractMethod<
    [player: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isDailyDrawReady: TypedContractMethod<[], [boolean], "view">;

  isWeeklyDrawReady: TypedContractMethod<[], [boolean], "view">;

  jackpotStateHash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  jackpotUpdateCooldown: TypedContractMethod<[], [bigint], "view">;

  jackpotUpdateNonce: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  lastDailyDraw: TypedContractMethod<[], [bigint], "view">;

  lastEntropyUpdate: TypedContractMethod<[], [bigint], "view">;

  lastGasOptimization: TypedContractMethod<[], [bigint], "view">;

  lastJackpotUpdate: TypedContractMethod<[], [bigint], "view">;

  lastWeeklyDraw: TypedContractMethod<[], [bigint], "view">;

  optimizeGasUsage: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingWinners: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        boolean
      ] & {
        totalToppings: bigint;
        dailyEntries: bigint;
        weeklyEntries: bigint;
        lastEntryTime: bigint;
        streakDays: bigint;
        lastStreakUpdate: bigint;
        isBlacklisted: boolean;
        lastVMFHoldingsCheck: bigint;
        loyaltyPoints: bigint;
        totalOrders: bigint;
        weeklyChallengesCompleted: bigint;
        jackpotEntries: bigint;
        lastRewardClaim: bigint;
        hasCompletedFirstOrder: boolean;
        dailyRewardsClaimed: bigint;
        lastSecurityCheck: bigint;
        isRateLimited: boolean;
      }
    ],
    "view"
  >;

  priceOracle: TypedContractMethod<[], [string], "view">;

  processBatchPlayers: TypedContractMethod<
    [players: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  processDailyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  processWeeklyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  randomnessContract: TypedContractMethod<[], [string], "view">;

  randomnessSeeds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  referralCodes: TypedContractMethod<[arg0: string], [string], "view">;

  referrals: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        referrer: string;
        totalReferrals: bigint;
        totalRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestDailyRandomness: TypedContractMethod<[], [void], "nonpayable">;

  requestDailyVRF: TypedContractMethod<[], [void], "nonpayable">;

  requestWeeklyVRF: TypedContractMethod<[], [void], "nonpayable">;

  revealRandomness: TypedContractMethod<
    [roundId: BigNumberish, randomValue: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roleAdmins: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  roles: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  selectDailyWinners: TypedContractMethod<[], [void], "nonpayable">;

  setJackpotUpdateCooldown: TypedContractMethod<
    [cooldown: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlayerBlacklist: TypedContractMethod<
    [player: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  setRoleAdmin: TypedContractMethod<
    [role: BytesLike, admin: AddressLike],
    [void],
    "nonpayable"
  >;

  setUseVRF: TypedContractMethod<[_useVRF: boolean], [void], "nonpayable">;

  setVRFContract: TypedContractMethod<
    [_vrfContract: AddressLike],
    [void],
    "nonpayable"
  >;

  submitRandomnessCommitment: TypedContractMethod<
    [roundId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateJackpotAtomic: TypedContractMethod<
    [
      gameId: BigNumberish,
      newAmount: BigNumberish,
      expectedStateHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  useVRF: TypedContractMethod<[], [boolean], "view">;

  userDailyRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userLastActivity: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userRateLimitEnd: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  vmfToken: TypedContractMethod<[], [string], "view">;

  vrfContract: TypedContractMethod<[], [string], "view">;

  vrfRequests: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  weeklyChallenges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        challengeId: bigint;
        challengeName: string;
        rewardAmount: bigint;
        completionRequirement: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  weeklyPlayerCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  weeklyPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_SEPOLIA_HOLDING_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAILY_PLAY_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAILY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOLLAR_ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENTRY_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIRST_ORDER_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAS_OPTIMIZATION_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "JACKPOT_ENTRY_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "JACKPOT_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOYALTY_POINTS_PER_DOLLAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_ENTRIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_REWARDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_JACKPOT_ENTRIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRICE_DEVIATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REFERRAL_CODE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REWARD_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BASE_SEPOLIA_HOLDING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REFERRAL_CODE_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRICE_UPDATE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEKLY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addJackpotEntry"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "awardBaseSepoliaHoldingsToppings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "awardLoyaltyPoints"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "awardStreakBonus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchProcessingActive"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchProcessingNonce"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimFirstOrderReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWeeklyChallengeReward"
  ): TypedContractMethod<[challengeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contributeEntropy"
  ): TypedContractMethod<[entropy: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createReferralCode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentDailyJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRandomnessRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentWeeklyJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyPlayerCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "drawDailyWinners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drawWeeklyWinners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnlockGame"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enterDailyGame"
  ): TypedContractMethod<[referralCode: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "entropyContributions"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "entropyContributors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "entropyRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameStateLocked"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        gameId: bigint;
        startTime: bigint;
        endTime: bigint;
        totalEntries: bigint;
        jackpotAmount: bigint;
        isCompleted: boolean;
        randomnessRoundId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gasOptimizationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateSecureRandomness"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentEntryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentGame"
  ): TypedContractMethod<[], [PizzaParty.GameStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentVMFPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEligibleDailyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEligibleWeeklyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [PizzaParty.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasUsageStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        threshold: bigint;
        lastOptimization: bigint;
        batchNonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJackpotState"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, bigint] & {
        amount: bigint;
        stateHash: string;
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [PizzaParty.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [PizzaParty.ReferralStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasEnteredToday"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDailyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWeeklyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "jackpotStateHash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "jackpotUpdateCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jackpotUpdateNonce"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastDailyDraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastEntropyUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastGasOptimization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastJackpotUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastWeeklyDraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "optimizeGasUsage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingWinners"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        boolean
      ] & {
        totalToppings: bigint;
        dailyEntries: bigint;
        weeklyEntries: bigint;
        lastEntryTime: bigint;
        streakDays: bigint;
        lastStreakUpdate: bigint;
        isBlacklisted: boolean;
        lastVMFHoldingsCheck: bigint;
        loyaltyPoints: bigint;
        totalOrders: bigint;
        weeklyChallengesCompleted: bigint;
        jackpotEntries: bigint;
        lastRewardClaim: bigint;
        hasCompletedFirstOrder: boolean;
        dailyRewardsClaimed: bigint;
        lastSecurityCheck: bigint;
        isRateLimited: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processBatchPlayers"
  ): TypedContractMethod<
    [players: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processDailyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processWeeklyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "randomnessContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomnessSeeds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "referralCodes"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "referrals"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        referrer: string;
        totalReferrals: bigint;
        totalRewards: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestDailyRandomness"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestDailyVRF"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWeeklyVRF"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealRandomness"
  ): TypedContractMethod<
    [roundId: BigNumberish, randomValue: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleAdmins"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectDailyWinners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJackpotUpdateCooldown"
  ): TypedContractMethod<[cooldown: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlayerBlacklist"
  ): TypedContractMethod<
    [player: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleAdmin"
  ): TypedContractMethod<
    [role: BytesLike, admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUseVRF"
  ): TypedContractMethod<[_useVRF: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVRFContract"
  ): TypedContractMethod<[_vrfContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitRandomnessCommitment"
  ): TypedContractMethod<
    [roundId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateJackpotAtomic"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      newAmount: BigNumberish,
      expectedStateHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "useVRF"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "userDailyRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userLastActivity"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRateLimitEnd"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vrfContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vrfRequests"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "weeklyChallenges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        challengeId: bigint;
        challengeName: string;
        rewardAmount: bigint;
        completionRequirement: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "weeklyPlayerCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "weeklyPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "BatchPlayersProcessed"
  ): TypedContractEvent<
    BatchPlayersProcessedEvent.InputTuple,
    BatchPlayersProcessedEvent.OutputTuple,
    BatchPlayersProcessedEvent.OutputObject
  >;
  getEvent(
    key: "DailyWinnersSelected"
  ): TypedContractEvent<
    DailyWinnersSelectedEvent.InputTuple,
    DailyWinnersSelectedEvent.OutputTuple,
    DailyWinnersSelectedEvent.OutputObject
  >;
  getEvent(
    key: "DynamicEntryFeeCalculated"
  ): TypedContractEvent<
    DynamicEntryFeeCalculatedEvent.InputTuple,
    DynamicEntryFeeCalculatedEvent.OutputTuple,
    DynamicEntryFeeCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "EntropyContributed"
  ): TypedContractEvent<
    EntropyContributedEvent.InputTuple,
    EntropyContributedEvent.OutputTuple,
    EntropyContributedEvent.OutputObject
  >;
  getEvent(
    key: "FirstOrderRewardClaimed"
  ): TypedContractEvent<
    FirstOrderRewardClaimedEvent.InputTuple,
    FirstOrderRewardClaimedEvent.OutputTuple,
    FirstOrderRewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "GameStateUnlocked"
  ): TypedContractEvent<
    GameStateUnlockedEvent.InputTuple,
    GameStateUnlockedEvent.OutputTuple,
    GameStateUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "GasOptimizationCompleted"
  ): TypedContractEvent<
    GasOptimizationCompletedEvent.InputTuple,
    GasOptimizationCompletedEvent.OutputTuple,
    GasOptimizationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JackpotEntryAdded"
  ): TypedContractEvent<
    JackpotEntryAddedEvent.InputTuple,
    JackpotEntryAddedEvent.OutputTuple,
    JackpotEntryAddedEvent.OutputObject
  >;
  getEvent(
    key: "JackpotUpdateCooldownSet"
  ): TypedContractEvent<
    JackpotUpdateCooldownSetEvent.InputTuple,
    JackpotUpdateCooldownSetEvent.OutputTuple,
    JackpotUpdateCooldownSetEvent.OutputObject
  >;
  getEvent(
    key: "JackpotUpdated"
  ): TypedContractEvent<
    JackpotUpdatedEvent.InputTuple,
    JackpotUpdatedEvent.OutputTuple,
    JackpotUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JackpotUpdatedAtomic"
  ): TypedContractEvent<
    JackpotUpdatedAtomicEvent.InputTuple,
    JackpotUpdatedAtomicEvent.OutputTuple,
    JackpotUpdatedAtomicEvent.OutputObject
  >;
  getEvent(
    key: "LoyaltyPointsAwarded"
  ): TypedContractEvent<
    LoyaltyPointsAwardedEvent.InputTuple,
    LoyaltyPointsAwardedEvent.OutputTuple,
    LoyaltyPointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerBlacklisted"
  ): TypedContractEvent<
    PlayerBlacklistedEvent.InputTuple,
    PlayerBlacklistedEvent.OutputTuple,
    PlayerBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerEntered"
  ): TypedContractEvent<
    PlayerEnteredEvent.InputTuple,
    PlayerEnteredEvent.OutputTuple,
    PlayerEnteredEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RateLimitTriggered"
  ): TypedContractEvent<
    RateLimitTriggeredEvent.InputTuple,
    RateLimitTriggeredEvent.OutputTuple,
    RateLimitTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCreated"
  ): TypedContractEvent<
    ReferralCreatedEvent.InputTuple,
    ReferralCreatedEvent.OutputTuple,
    ReferralCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralProcessed"
  ): TypedContractEvent<
    ReferralProcessedEvent.InputTuple,
    ReferralProcessedEvent.OutputTuple,
    ReferralProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminSet"
  ): TypedContractEvent<
    RoleAdminSetEvent.InputTuple,
    RoleAdminSetEvent.OutputTuple,
    RoleAdminSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SecureRandomnessGenerated"
  ): TypedContractEvent<
    SecureRandomnessGeneratedEvent.InputTuple,
    SecureRandomnessGeneratedEvent.OutputTuple,
    SecureRandomnessGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "ToppingsAwarded"
  ): TypedContractEvent<
    ToppingsAwardedEvent.InputTuple,
    ToppingsAwardedEvent.OutputTuple,
    ToppingsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VRFRequestSubmitted"
  ): TypedContractEvent<
    VRFRequestSubmittedEvent.InputTuple,
    VRFRequestSubmittedEvent.OutputTuple,
    VRFRequestSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyChallengeCompleted"
  ): TypedContractEvent<
    WeeklyChallengeCompletedEvent.InputTuple,
    WeeklyChallengeCompletedEvent.OutputTuple,
    WeeklyChallengeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyWinnersSelected"
  ): TypedContractEvent<
    WeeklyWinnersSelectedEvent.InputTuple,
    WeeklyWinnersSelectedEvent.OutputTuple,
    WeeklyWinnersSelectedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersSelectedWithRandomness"
  ): TypedContractEvent<
    WinnersSelectedWithRandomnessEvent.InputTuple,
    WinnersSelectedWithRandomnessEvent.OutputTuple,
    WinnersSelectedWithRandomnessEvent.OutputObject
  >;

  filters: {
    "BatchPlayersProcessed(uint256,uint256,uint256)": TypedContractEvent<
      BatchPlayersProcessedEvent.InputTuple,
      BatchPlayersProcessedEvent.OutputTuple,
      BatchPlayersProcessedEvent.OutputObject
    >;
    BatchPlayersProcessed: TypedContractEvent<
      BatchPlayersProcessedEvent.InputTuple,
      BatchPlayersProcessedEvent.OutputTuple,
      BatchPlayersProcessedEvent.OutputObject
    >;

    "DailyWinnersSelected(uint256,address[],uint256)": TypedContractEvent<
      DailyWinnersSelectedEvent.InputTuple,
      DailyWinnersSelectedEvent.OutputTuple,
      DailyWinnersSelectedEvent.OutputObject
    >;
    DailyWinnersSelected: TypedContractEvent<
      DailyWinnersSelectedEvent.InputTuple,
      DailyWinnersSelectedEvent.OutputTuple,
      DailyWinnersSelectedEvent.OutputObject
    >;

    "DynamicEntryFeeCalculated(uint256,uint256,uint256)": TypedContractEvent<
      DynamicEntryFeeCalculatedEvent.InputTuple,
      DynamicEntryFeeCalculatedEvent.OutputTuple,
      DynamicEntryFeeCalculatedEvent.OutputObject
    >;
    DynamicEntryFeeCalculated: TypedContractEvent<
      DynamicEntryFeeCalculatedEvent.InputTuple,
      DynamicEntryFeeCalculatedEvent.OutputTuple,
      DynamicEntryFeeCalculatedEvent.OutputObject
    >;

    "EmergencyPause(bool)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "EntropyContributed(address,bytes32,uint256)": TypedContractEvent<
      EntropyContributedEvent.InputTuple,
      EntropyContributedEvent.OutputTuple,
      EntropyContributedEvent.OutputObject
    >;
    EntropyContributed: TypedContractEvent<
      EntropyContributedEvent.InputTuple,
      EntropyContributedEvent.OutputTuple,
      EntropyContributedEvent.OutputObject
    >;

    "FirstOrderRewardClaimed(address,uint256)": TypedContractEvent<
      FirstOrderRewardClaimedEvent.InputTuple,
      FirstOrderRewardClaimedEvent.OutputTuple,
      FirstOrderRewardClaimedEvent.OutputObject
    >;
    FirstOrderRewardClaimed: TypedContractEvent<
      FirstOrderRewardClaimedEvent.InputTuple,
      FirstOrderRewardClaimedEvent.OutputTuple,
      FirstOrderRewardClaimedEvent.OutputObject
    >;

    "GameStateUnlocked(uint256,address)": TypedContractEvent<
      GameStateUnlockedEvent.InputTuple,
      GameStateUnlockedEvent.OutputTuple,
      GameStateUnlockedEvent.OutputObject
    >;
    GameStateUnlocked: TypedContractEvent<
      GameStateUnlockedEvent.InputTuple,
      GameStateUnlockedEvent.OutputTuple,
      GameStateUnlockedEvent.OutputObject
    >;

    "GasOptimizationCompleted(uint256,uint256)": TypedContractEvent<
      GasOptimizationCompletedEvent.InputTuple,
      GasOptimizationCompletedEvent.OutputTuple,
      GasOptimizationCompletedEvent.OutputObject
    >;
    GasOptimizationCompleted: TypedContractEvent<
      GasOptimizationCompletedEvent.InputTuple,
      GasOptimizationCompletedEvent.OutputTuple,
      GasOptimizationCompletedEvent.OutputObject
    >;

    "JackpotEntryAdded(address,uint256)": TypedContractEvent<
      JackpotEntryAddedEvent.InputTuple,
      JackpotEntryAddedEvent.OutputTuple,
      JackpotEntryAddedEvent.OutputObject
    >;
    JackpotEntryAdded: TypedContractEvent<
      JackpotEntryAddedEvent.InputTuple,
      JackpotEntryAddedEvent.OutputTuple,
      JackpotEntryAddedEvent.OutputObject
    >;

    "JackpotUpdateCooldownSet(uint256)": TypedContractEvent<
      JackpotUpdateCooldownSetEvent.InputTuple,
      JackpotUpdateCooldownSetEvent.OutputTuple,
      JackpotUpdateCooldownSetEvent.OutputObject
    >;
    JackpotUpdateCooldownSet: TypedContractEvent<
      JackpotUpdateCooldownSetEvent.InputTuple,
      JackpotUpdateCooldownSetEvent.OutputTuple,
      JackpotUpdateCooldownSetEvent.OutputObject
    >;

    "JackpotUpdated(uint256,uint256)": TypedContractEvent<
      JackpotUpdatedEvent.InputTuple,
      JackpotUpdatedEvent.OutputTuple,
      JackpotUpdatedEvent.OutputObject
    >;
    JackpotUpdated: TypedContractEvent<
      JackpotUpdatedEvent.InputTuple,
      JackpotUpdatedEvent.OutputTuple,
      JackpotUpdatedEvent.OutputObject
    >;

    "JackpotUpdatedAtomic(uint256,uint256,uint256,uint256)": TypedContractEvent<
      JackpotUpdatedAtomicEvent.InputTuple,
      JackpotUpdatedAtomicEvent.OutputTuple,
      JackpotUpdatedAtomicEvent.OutputObject
    >;
    JackpotUpdatedAtomic: TypedContractEvent<
      JackpotUpdatedAtomicEvent.InputTuple,
      JackpotUpdatedAtomicEvent.OutputTuple,
      JackpotUpdatedAtomicEvent.OutputObject
    >;

    "LoyaltyPointsAwarded(address,uint256,string)": TypedContractEvent<
      LoyaltyPointsAwardedEvent.InputTuple,
      LoyaltyPointsAwardedEvent.OutputTuple,
      LoyaltyPointsAwardedEvent.OutputObject
    >;
    LoyaltyPointsAwarded: TypedContractEvent<
      LoyaltyPointsAwardedEvent.InputTuple,
      LoyaltyPointsAwardedEvent.OutputTuple,
      LoyaltyPointsAwardedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlayerBlacklisted(address,bool)": TypedContractEvent<
      PlayerBlacklistedEvent.InputTuple,
      PlayerBlacklistedEvent.OutputTuple,
      PlayerBlacklistedEvent.OutputObject
    >;
    PlayerBlacklisted: TypedContractEvent<
      PlayerBlacklistedEvent.InputTuple,
      PlayerBlacklistedEvent.OutputTuple,
      PlayerBlacklistedEvent.OutputObject
    >;

    "PlayerEntered(address,uint256,uint256)": TypedContractEvent<
      PlayerEnteredEvent.InputTuple,
      PlayerEnteredEvent.OutputTuple,
      PlayerEnteredEvent.OutputObject
    >;
    PlayerEntered: TypedContractEvent<
      PlayerEnteredEvent.InputTuple,
      PlayerEnteredEvent.OutputTuple,
      PlayerEnteredEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RateLimitTriggered(address,uint256)": TypedContractEvent<
      RateLimitTriggeredEvent.InputTuple,
      RateLimitTriggeredEvent.OutputTuple,
      RateLimitTriggeredEvent.OutputObject
    >;
    RateLimitTriggered: TypedContractEvent<
      RateLimitTriggeredEvent.InputTuple,
      RateLimitTriggeredEvent.OutputTuple,
      RateLimitTriggeredEvent.OutputObject
    >;

    "ReferralCreated(address,string)": TypedContractEvent<
      ReferralCreatedEvent.InputTuple,
      ReferralCreatedEvent.OutputTuple,
      ReferralCreatedEvent.OutputObject
    >;
    ReferralCreated: TypedContractEvent<
      ReferralCreatedEvent.InputTuple,
      ReferralCreatedEvent.OutputTuple,
      ReferralCreatedEvent.OutputObject
    >;

    "ReferralProcessed(string,address)": TypedContractEvent<
      ReferralProcessedEvent.InputTuple,
      ReferralProcessedEvent.OutputTuple,
      ReferralProcessedEvent.OutputObject
    >;
    ReferralProcessed: TypedContractEvent<
      ReferralProcessedEvent.InputTuple,
      ReferralProcessedEvent.OutputTuple,
      ReferralProcessedEvent.OutputObject
    >;

    "RoleAdminSet(bytes32,address)": TypedContractEvent<
      RoleAdminSetEvent.InputTuple,
      RoleAdminSetEvent.OutputTuple,
      RoleAdminSetEvent.OutputObject
    >;
    RoleAdminSet: TypedContractEvent<
      RoleAdminSetEvent.InputTuple,
      RoleAdminSetEvent.OutputTuple,
      RoleAdminSetEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SecureRandomnessGenerated(uint256,bytes32)": TypedContractEvent<
      SecureRandomnessGeneratedEvent.InputTuple,
      SecureRandomnessGeneratedEvent.OutputTuple,
      SecureRandomnessGeneratedEvent.OutputObject
    >;
    SecureRandomnessGenerated: TypedContractEvent<
      SecureRandomnessGeneratedEvent.InputTuple,
      SecureRandomnessGeneratedEvent.OutputTuple,
      SecureRandomnessGeneratedEvent.OutputObject
    >;

    "ToppingsAwarded(address,uint256,string)": TypedContractEvent<
      ToppingsAwardedEvent.InputTuple,
      ToppingsAwardedEvent.OutputTuple,
      ToppingsAwardedEvent.OutputObject
    >;
    ToppingsAwarded: TypedContractEvent<
      ToppingsAwardedEvent.InputTuple,
      ToppingsAwardedEvent.OutputTuple,
      ToppingsAwardedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VRFRequestSubmitted(uint256,uint256,string)": TypedContractEvent<
      VRFRequestSubmittedEvent.InputTuple,
      VRFRequestSubmittedEvent.OutputTuple,
      VRFRequestSubmittedEvent.OutputObject
    >;
    VRFRequestSubmitted: TypedContractEvent<
      VRFRequestSubmittedEvent.InputTuple,
      VRFRequestSubmittedEvent.OutputTuple,
      VRFRequestSubmittedEvent.OutputObject
    >;

    "WeeklyChallengeCompleted(address,uint256,uint256)": TypedContractEvent<
      WeeklyChallengeCompletedEvent.InputTuple,
      WeeklyChallengeCompletedEvent.OutputTuple,
      WeeklyChallengeCompletedEvent.OutputObject
    >;
    WeeklyChallengeCompleted: TypedContractEvent<
      WeeklyChallengeCompletedEvent.InputTuple,
      WeeklyChallengeCompletedEvent.OutputTuple,
      WeeklyChallengeCompletedEvent.OutputObject
    >;

    "WeeklyWinnersSelected(uint256,address[],uint256)": TypedContractEvent<
      WeeklyWinnersSelectedEvent.InputTuple,
      WeeklyWinnersSelectedEvent.OutputTuple,
      WeeklyWinnersSelectedEvent.OutputObject
    >;
    WeeklyWinnersSelected: TypedContractEvent<
      WeeklyWinnersSelectedEvent.InputTuple,
      WeeklyWinnersSelectedEvent.OutputTuple,
      WeeklyWinnersSelectedEvent.OutputObject
    >;

    "WinnersSelectedWithRandomness(uint256,uint256,address[])": TypedContractEvent<
      WinnersSelectedWithRandomnessEvent.InputTuple,
      WinnersSelectedWithRandomnessEvent.OutputTuple,
      WinnersSelectedWithRandomnessEvent.OutputObject
    >;
    WinnersSelectedWithRandomness: TypedContractEvent<
      WinnersSelectedWithRandomnessEvent.InputTuple,
      WinnersSelectedWithRandomnessEvent.OutputTuple,
      WinnersSelectedWithRandomnessEvent.OutputObject
    >;
  };
}
