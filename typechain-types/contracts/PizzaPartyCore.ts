/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PizzaPartyCore {
  export type PlayerStruct = {
    totalToppings: BigNumberish;
    dailyEntries: BigNumberish;
    weeklyEntries: BigNumberish;
    lastEntryTime: BigNumberish;
    vmfBalance: BigNumberish;
    lastVmfBalanceCheck: BigNumberish;
    referrals: BigNumberish;
    isBlacklisted: boolean;
  };

  export type PlayerStructOutput = [
    totalToppings: bigint,
    dailyEntries: bigint,
    weeklyEntries: bigint,
    lastEntryTime: bigint,
    vmfBalance: bigint,
    lastVmfBalanceCheck: bigint,
    referrals: bigint,
    isBlacklisted: boolean
  ] & {
    totalToppings: bigint;
    dailyEntries: bigint;
    weeklyEntries: bigint;
    lastEntryTime: bigint;
    vmfBalance: bigint;
    lastVmfBalanceCheck: bigint;
    referrals: bigint;
    isBlacklisted: boolean;
  };
}

export interface PizzaPartyCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAILY_PLAY_REWARD"
      | "DAILY_WINNERS_COUNT"
      | "ENTRY_COOLDOWN"
      | "MAX_DAILY_ENTRIES"
      | "MIN_VMF_REQUIRED"
      | "REFERRAL_REWARD"
      | "VMF_HOLDING_REWARD"
      | "VMF_HOLDING_THRESHOLD"
      | "VMF_PER_TOPPING"
      | "WEEKLY_WINNERS_COUNT"
      | "addToDailyJackpot"
      | "blacklistedAddresses"
      | "currentDailyJackpot"
      | "dailyPlayerCount"
      | "dailyPlayers"
      | "emergencyPause"
      | "emergencyWithdraw"
      | "enterDailyGame"
      | "getCurrentGameId"
      | "getDailyJackpot"
      | "getEligibleDailyPlayers"
      | "getEligibleWeeklyPlayers"
      | "getMinimumVMFRequired"
      | "getPlayerInfo"
      | "getPlayerReferralInfo"
      | "getPlayerToppings"
      | "getPlayerVMFBalance"
      | "getTotalToppingsClaimed"
      | "getWeeklyJackpot"
      | "getWeeklyToppingsPool"
      | "isDailyDrawReady"
      | "isWeeklyDrawReady"
      | "lastDailyDraw"
      | "lastWeeklyDraw"
      | "owner"
      | "paused"
      | "players"
      | "processDailyWinners"
      | "processWeeklyWinners"
      | "referralCount"
      | "referrers"
      | "renounceOwnership"
      | "setPlayerBlacklist"
      | "totalToppingsClaimed"
      | "transferOwnership"
      | "vmfToken"
      | "weeklyPlayerCount"
      | "weeklyPlayers"
      | "weeklyToppingsPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DailyWinnersSelected"
      | "JackpotUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PlayerBlacklisted"
      | "PlayerEntered"
      | "ReferralRegistered"
      | "ToppingsAwarded"
      | "Unpaused"
      | "WeeklyWinnersSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DAILY_PLAY_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAILY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENTRY_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_ENTRIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VMF_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VMF_HOLDING_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VMF_HOLDING_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VMF_PER_TOPPING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToDailyJackpot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPlayerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterDailyGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleDailyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleWeeklyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumVMFRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerToppings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerVMFBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalToppingsClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeeklyJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeeklyToppingsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDailyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWeeklyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDailyDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWeeklyDraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processDailyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processWeeklyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayerBlacklist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalToppingsClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vmfToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weeklyPlayerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyToppingsPool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DAILY_PLAY_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAILY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENTRY_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_ENTRIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VMF_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VMF_HOLDING_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VMF_HOLDING_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VMF_PER_TOPPING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEKLY_WINNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToDailyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterDailyGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleDailyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleWeeklyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumVMFRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerToppings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerVMFBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalToppingsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeeklyJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeeklyToppingsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDailyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWeeklyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDailyDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWeeklyDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDailyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWeeklyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayerBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalToppingsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vmfToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weeklyPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyToppingsPool",
    data: BytesLike
  ): Result;
}

export namespace DailyWinnersSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winners: AddressLike[],
    jackpot: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winners: string[],
    jackpot: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
    jackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotUpdatedEvent {
  export type InputTuple = [
    dailyJackpot: BigNumberish,
    weeklyJackpot: BigNumberish
  ];
  export type OutputTuple = [dailyJackpot: bigint, weeklyJackpot: bigint];
  export interface OutputObject {
    dailyJackpot: bigint;
    weeklyJackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerBlacklistedEvent {
  export type InputTuple = [player: AddressLike, blacklisted: boolean];
  export type OutputTuple = [player: string, blacklisted: boolean];
  export interface OutputObject {
    player: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerEnteredEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [player: string, gameId: bigint, amount: bigint];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRegisteredEvent {
  export type InputTuple = [referrer: AddressLike, referred: AddressLike];
  export type OutputTuple = [referrer: string, referred: string];
  export interface OutputObject {
    referrer: string;
    referred: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ToppingsAwardedEvent {
  export type InputTuple = [
    player: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [player: string, amount: bigint, reason: string];
  export interface OutputObject {
    player: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyWinnersSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winners: AddressLike[],
    jackpot: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winners: string[],
    jackpot: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
    jackpot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyCore extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyCore;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAILY_PLAY_REWARD: TypedContractMethod<[], [bigint], "view">;

  DAILY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  ENTRY_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_ENTRIES: TypedContractMethod<[], [bigint], "view">;

  MIN_VMF_REQUIRED: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_REWARD: TypedContractMethod<[], [bigint], "view">;

  VMF_HOLDING_REWARD: TypedContractMethod<[], [bigint], "view">;

  VMF_HOLDING_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VMF_PER_TOPPING: TypedContractMethod<[], [bigint], "view">;

  WEEKLY_WINNERS_COUNT: TypedContractMethod<[], [bigint], "view">;

  addToDailyJackpot: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  blacklistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  currentDailyJackpot: TypedContractMethod<[], [bigint], "view">;

  dailyPlayerCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  dailyPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  emergencyPause: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  enterDailyGame: TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  getDailyJackpot: TypedContractMethod<[], [bigint], "view">;

  getEligibleDailyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  getEligibleWeeklyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  getMinimumVMFRequired: TypedContractMethod<[], [bigint], "view">;

  getPlayerInfo: TypedContractMethod<
    [player: AddressLike],
    [PizzaPartyCore.PlayerStructOutput],
    "view"
  >;

  getPlayerReferralInfo: TypedContractMethod<
    [player: AddressLike],
    [[bigint, string] & { referrals: bigint; referrer: string }],
    "view"
  >;

  getPlayerToppings: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerVMFBalance: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getTotalToppingsClaimed: TypedContractMethod<[], [bigint], "view">;

  getWeeklyJackpot: TypedContractMethod<[], [bigint], "view">;

  getWeeklyToppingsPool: TypedContractMethod<[], [bigint], "view">;

  isDailyDrawReady: TypedContractMethod<[], [boolean], "view">;

  isWeeklyDrawReady: TypedContractMethod<[], [boolean], "view">;

  lastDailyDraw: TypedContractMethod<[], [bigint], "view">;

  lastWeeklyDraw: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalToppings: bigint;
        dailyEntries: bigint;
        weeklyEntries: bigint;
        lastEntryTime: bigint;
        vmfBalance: bigint;
        lastVmfBalanceCheck: bigint;
        referrals: bigint;
        isBlacklisted: boolean;
      }
    ],
    "view"
  >;

  processDailyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  processWeeklyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  referralCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referrers: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPlayerBlacklist: TypedContractMethod<
    [player: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;

  totalToppingsClaimed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vmfToken: TypedContractMethod<[], [string], "view">;

  weeklyPlayerCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  weeklyPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  weeklyToppingsPool: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAILY_PLAY_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAILY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ENTRY_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_ENTRIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VMF_REQUIRED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VMF_HOLDING_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VMF_HOLDING_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VMF_PER_TOPPING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEKLY_WINNERS_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addToDailyJackpot"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blacklistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentDailyJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyPlayerCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enterDailyGame"
  ): TypedContractMethod<[referrer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDailyJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEligibleDailyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEligibleWeeklyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMinimumVMFRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [PizzaPartyCore.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerReferralInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [[bigint, string] & { referrals: bigint; referrer: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerToppings"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerVMFBalance"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalToppingsClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWeeklyJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWeeklyToppingsPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isDailyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWeeklyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDailyDraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastWeeklyDraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalToppings: bigint;
        dailyEntries: bigint;
        weeklyEntries: bigint;
        lastEntryTime: bigint;
        vmfBalance: bigint;
        lastVmfBalanceCheck: bigint;
        referrals: bigint;
        isBlacklisted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processDailyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processWeeklyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "referralCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrers"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlayerBlacklist"
  ): TypedContractMethod<
    [player: AddressLike, blacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalToppingsClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vmfToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weeklyPlayerCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "weeklyPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "weeklyToppingsPool"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DailyWinnersSelected"
  ): TypedContractEvent<
    DailyWinnersSelectedEvent.InputTuple,
    DailyWinnersSelectedEvent.OutputTuple,
    DailyWinnersSelectedEvent.OutputObject
  >;
  getEvent(
    key: "JackpotUpdated"
  ): TypedContractEvent<
    JackpotUpdatedEvent.InputTuple,
    JackpotUpdatedEvent.OutputTuple,
    JackpotUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerBlacklisted"
  ): TypedContractEvent<
    PlayerBlacklistedEvent.InputTuple,
    PlayerBlacklistedEvent.OutputTuple,
    PlayerBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerEntered"
  ): TypedContractEvent<
    PlayerEnteredEvent.InputTuple,
    PlayerEnteredEvent.OutputTuple,
    PlayerEnteredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRegistered"
  ): TypedContractEvent<
    ReferralRegisteredEvent.InputTuple,
    ReferralRegisteredEvent.OutputTuple,
    ReferralRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ToppingsAwarded"
  ): TypedContractEvent<
    ToppingsAwardedEvent.InputTuple,
    ToppingsAwardedEvent.OutputTuple,
    ToppingsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyWinnersSelected"
  ): TypedContractEvent<
    WeeklyWinnersSelectedEvent.InputTuple,
    WeeklyWinnersSelectedEvent.OutputTuple,
    WeeklyWinnersSelectedEvent.OutputObject
  >;

  filters: {
    "DailyWinnersSelected(uint256,address[],uint256)": TypedContractEvent<
      DailyWinnersSelectedEvent.InputTuple,
      DailyWinnersSelectedEvent.OutputTuple,
      DailyWinnersSelectedEvent.OutputObject
    >;
    DailyWinnersSelected: TypedContractEvent<
      DailyWinnersSelectedEvent.InputTuple,
      DailyWinnersSelectedEvent.OutputTuple,
      DailyWinnersSelectedEvent.OutputObject
    >;

    "JackpotUpdated(uint256,uint256)": TypedContractEvent<
      JackpotUpdatedEvent.InputTuple,
      JackpotUpdatedEvent.OutputTuple,
      JackpotUpdatedEvent.OutputObject
    >;
    JackpotUpdated: TypedContractEvent<
      JackpotUpdatedEvent.InputTuple,
      JackpotUpdatedEvent.OutputTuple,
      JackpotUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlayerBlacklisted(address,bool)": TypedContractEvent<
      PlayerBlacklistedEvent.InputTuple,
      PlayerBlacklistedEvent.OutputTuple,
      PlayerBlacklistedEvent.OutputObject
    >;
    PlayerBlacklisted: TypedContractEvent<
      PlayerBlacklistedEvent.InputTuple,
      PlayerBlacklistedEvent.OutputTuple,
      PlayerBlacklistedEvent.OutputObject
    >;

    "PlayerEntered(address,uint256,uint256)": TypedContractEvent<
      PlayerEnteredEvent.InputTuple,
      PlayerEnteredEvent.OutputTuple,
      PlayerEnteredEvent.OutputObject
    >;
    PlayerEntered: TypedContractEvent<
      PlayerEnteredEvent.InputTuple,
      PlayerEnteredEvent.OutputTuple,
      PlayerEnteredEvent.OutputObject
    >;

    "ReferralRegistered(address,address)": TypedContractEvent<
      ReferralRegisteredEvent.InputTuple,
      ReferralRegisteredEvent.OutputTuple,
      ReferralRegisteredEvent.OutputObject
    >;
    ReferralRegistered: TypedContractEvent<
      ReferralRegisteredEvent.InputTuple,
      ReferralRegisteredEvent.OutputTuple,
      ReferralRegisteredEvent.OutputObject
    >;

    "ToppingsAwarded(address,uint256,string)": TypedContractEvent<
      ToppingsAwardedEvent.InputTuple,
      ToppingsAwardedEvent.OutputTuple,
      ToppingsAwardedEvent.OutputObject
    >;
    ToppingsAwarded: TypedContractEvent<
      ToppingsAwardedEvent.InputTuple,
      ToppingsAwardedEvent.OutputTuple,
      ToppingsAwardedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WeeklyWinnersSelected(uint256,address[],uint256)": TypedContractEvent<
      WeeklyWinnersSelectedEvent.InputTuple,
      WeeklyWinnersSelectedEvent.OutputTuple,
      WeeklyWinnersSelectedEvent.OutputObject
    >;
    WeeklyWinnersSelected: TypedContractEvent<
      WeeklyWinnersSelectedEvent.InputTuple,
      WeeklyWinnersSelectedEvent.OutputTuple,
      WeeklyWinnersSelectedEvent.OutputObject
    >;
  };
}
