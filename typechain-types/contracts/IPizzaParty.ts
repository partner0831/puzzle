/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IPizzaPartyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentGameId"
      | "getEligibleDailyPlayers"
      | "getEligibleWeeklyPlayers"
      | "isDailyDrawReady"
      | "isWeeklyDrawReady"
      | "processDailyWinners"
      | "processWeeklyWinners"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleDailyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleWeeklyPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDailyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWeeklyDrawReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processDailyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processWeeklyWinners",
    values: [BigNumberish, AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleDailyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleWeeklyPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDailyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWeeklyDrawReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processDailyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWeeklyWinners",
    data: BytesLike
  ): Result;
}

export interface IPizzaParty extends BaseContract {
  connect(runner?: ContractRunner | null): IPizzaParty;
  waitForDeployment(): Promise<this>;

  interface: IPizzaPartyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  getEligibleDailyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  getEligibleWeeklyPlayers: TypedContractMethod<
    [gameId: BigNumberish],
    [string[]],
    "view"
  >;

  isDailyDrawReady: TypedContractMethod<[], [boolean], "view">;

  isWeeklyDrawReady: TypedContractMethod<[], [boolean], "view">;

  processDailyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  processWeeklyWinners: TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEligibleDailyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEligibleWeeklyPlayers"
  ): TypedContractMethod<[gameId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isDailyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWeeklyDrawReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processDailyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processWeeklyWinners"
  ): TypedContractMethod<
    [gameId: BigNumberish, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
