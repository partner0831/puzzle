/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FreePriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PRICE_DEVIATION"
      | "PRICE_PRECISION"
      | "UPDATE_THRESHOLD"
      | "activeSources"
      | "addPriceSource"
      | "currentPrice"
      | "deactivateSource"
      | "getActiveSources"
      | "getRequiredVMFForDollar"
      | "getSourceData"
      | "getVMFPrice"
      | "owner"
      | "priceSources"
      | "renounceOwnership"
      | "setEmergencyPrice"
      | "transferOwnership"
      | "updatePriceFromSource"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyPriceSet"
      | "OwnershipTransferred"
      | "PriceAggregated"
      | "PriceSourceAdded"
      | "PriceSourceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeSources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPriceSource",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateSource",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredVMFForDollar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVMFPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceSources",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFromSource",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredVMFForDollar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVMFPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFromSource",
    data: BytesLike
  ): Result;
}

export namespace EmergencyPriceSetEvent {
  export type InputTuple = [price: BigNumberish, setter: AddressLike];
  export type OutputTuple = [price: bigint, setter: string];
  export interface OutputObject {
    price: bigint;
    setter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceAggregatedEvent {
  export type InputTuple = [
    price: BigNumberish,
    timestamp: BigNumberish,
    sources: BigNumberish
  ];
  export type OutputTuple = [price: bigint, timestamp: bigint, sources: bigint];
  export interface OutputObject {
    price: bigint;
    timestamp: bigint;
    sources: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceSourceAddedEvent {
  export type InputTuple = [source: AddressLike, weight: BigNumberish];
  export type OutputTuple = [source: string, weight: bigint];
  export interface OutputObject {
    source: string;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceSourceUpdatedEvent {
  export type InputTuple = [
    source: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [source: string, price: bigint, timestamp: bigint];
  export interface OutputObject {
    source: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FreePriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): FreePriceOracle;
  waitForDeployment(): Promise<this>;

  interface: FreePriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PRICE_DEVIATION: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  UPDATE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  activeSources: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addPriceSource: TypedContractMethod<
    [source: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentPrice: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        aggregatedPrice: bigint;
        lastUpdate: bigint;
        totalSources: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  deactivateSource: TypedContractMethod<
    [source: AddressLike],
    [void],
    "nonpayable"
  >;

  getActiveSources: TypedContractMethod<[], [string[]], "view">;

  getRequiredVMFForDollar: TypedContractMethod<[], [bigint], "view">;

  getSourceData: TypedContractMethod<
    [source: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        weight: bigint;
      }
    ],
    "view"
  >;

  getVMFPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceSources: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        source: string;
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        weight: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyPrice: TypedContractMethod<
    [_price: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFromSource: TypedContractMethod<
    [source: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PRICE_DEVIATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPDATE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeSources"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addPriceSource"
  ): TypedContractMethod<
    [source: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentPrice"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        aggregatedPrice: bigint;
        lastUpdate: bigint;
        totalSources: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateSource"
  ): TypedContractMethod<[source: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveSources"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRequiredVMFForDollar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSourceData"
  ): TypedContractMethod<
    [source: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        weight: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVMFPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceSources"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        source: string;
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        weight: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyPrice"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFromSource"
  ): TypedContractMethod<
    [source: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmergencyPriceSet"
  ): TypedContractEvent<
    EmergencyPriceSetEvent.InputTuple,
    EmergencyPriceSetEvent.OutputTuple,
    EmergencyPriceSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceAggregated"
  ): TypedContractEvent<
    PriceAggregatedEvent.InputTuple,
    PriceAggregatedEvent.OutputTuple,
    PriceAggregatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceSourceAdded"
  ): TypedContractEvent<
    PriceSourceAddedEvent.InputTuple,
    PriceSourceAddedEvent.OutputTuple,
    PriceSourceAddedEvent.OutputObject
  >;
  getEvent(
    key: "PriceSourceUpdated"
  ): TypedContractEvent<
    PriceSourceUpdatedEvent.InputTuple,
    PriceSourceUpdatedEvent.OutputTuple,
    PriceSourceUpdatedEvent.OutputObject
  >;

  filters: {
    "EmergencyPriceSet(uint256,address)": TypedContractEvent<
      EmergencyPriceSetEvent.InputTuple,
      EmergencyPriceSetEvent.OutputTuple,
      EmergencyPriceSetEvent.OutputObject
    >;
    EmergencyPriceSet: TypedContractEvent<
      EmergencyPriceSetEvent.InputTuple,
      EmergencyPriceSetEvent.OutputTuple,
      EmergencyPriceSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceAggregated(uint256,uint256,uint256)": TypedContractEvent<
      PriceAggregatedEvent.InputTuple,
      PriceAggregatedEvent.OutputTuple,
      PriceAggregatedEvent.OutputObject
    >;
    PriceAggregated: TypedContractEvent<
      PriceAggregatedEvent.InputTuple,
      PriceAggregatedEvent.OutputTuple,
      PriceAggregatedEvent.OutputObject
    >;

    "PriceSourceAdded(address,uint256)": TypedContractEvent<
      PriceSourceAddedEvent.InputTuple,
      PriceSourceAddedEvent.OutputTuple,
      PriceSourceAddedEvent.OutputObject
    >;
    PriceSourceAdded: TypedContractEvent<
      PriceSourceAddedEvent.InputTuple,
      PriceSourceAddedEvent.OutputTuple,
      PriceSourceAddedEvent.OutputObject
    >;

    "PriceSourceUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceSourceUpdatedEvent.InputTuple,
      PriceSourceUpdatedEvent.OutputTuple,
      PriceSourceUpdatedEvent.OutputObject
    >;
    PriceSourceUpdated: TypedContractEvent<
      PriceSourceUpdatedEvent.InputTuple,
      PriceSourceUpdatedEvent.OutputTuple,
      PriceSourceUpdatedEvent.OutputObject
    >;
  };
}
