/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PizzaPartyFeeAbstractionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GAS_LIMIT_PER_ENTRY"
      | "MAX_DAILY_ENTRIES"
      | "dailyGasLimit"
      | "dailyGasUsed"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getDailyGasUsage"
      | "getUserRemainingGasAllowance"
      | "owner"
      | "paymaster"
      | "renounceOwnership"
      | "resetUserDailyGasUsage"
      | "sponsorGameEntry"
      | "transferOwnership"
      | "updateDailyGasLimit"
      | "updatePaymaster"
      | "updateUserDailyGasLimit"
      | "userDailyGasLimit"
      | "userDailyGasUsed"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DailyGasLimitUpdated"
      | "GasSponsored"
      | "OwnershipTransferred"
      | "PaymasterUpdated"
      | "UserGasLimitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GAS_LIMIT_PER_ENTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_ENTRIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyGasUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyGasUsage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRemainingGasAllowance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paymaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetUserDailyGasUsage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorGameEntry",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDailyGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymaster",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserDailyGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDailyGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDailyGasUsed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GAS_LIMIT_PER_ENTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_ENTRIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyGasUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRemainingGasAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paymaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetUserDailyGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorGameEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDailyGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserDailyGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDailyGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDailyGasUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace DailyGasLimitUpdatedEvent {
  export type InputTuple = [oldLimit: BigNumberish, newLimit: BigNumberish];
  export type OutputTuple = [oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasSponsoredEvent {
  export type InputTuple = [
    user: AddressLike,
    gasCost: BigNumberish,
    txHash: BytesLike
  ];
  export type OutputTuple = [user: string, gasCost: bigint, txHash: string];
  export interface OutputObject {
    user: string;
    gasCost: bigint;
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymasterUpdatedEvent {
  export type InputTuple = [
    oldPaymaster: AddressLike,
    newPaymaster: AddressLike
  ];
  export type OutputTuple = [oldPaymaster: string, newPaymaster: string];
  export interface OutputObject {
    oldPaymaster: string;
    newPaymaster: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserGasLimitUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldLimit: BigNumberish,
    newLimit: BigNumberish
  ];
  export type OutputTuple = [user: string, oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    user: string;
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PizzaPartyFeeAbstraction extends BaseContract {
  connect(runner?: ContractRunner | null): PizzaPartyFeeAbstraction;
  waitForDeployment(): Promise<this>;

  interface: PizzaPartyFeeAbstractionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GAS_LIMIT_PER_ENTRY: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_ENTRIES: TypedContractMethod<[], [bigint], "view">;

  dailyGasLimit: TypedContractMethod<[], [bigint], "view">;

  dailyGasUsed: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getDailyGasUsage: TypedContractMethod<[date: BigNumberish], [bigint], "view">;

  getUserRemainingGasAllowance: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paymaster: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetUserDailyGasUsage: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  sponsorGameEntry: TypedContractMethod<
    [user: AddressLike, gameContract: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDailyGasLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePaymaster: TypedContractMethod<
    [newPaymaster: AddressLike],
    [void],
    "nonpayable"
  >;

  updateUserDailyGasLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  userDailyGasLimit: TypedContractMethod<[], [bigint], "view">;

  userDailyGasUsed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GAS_LIMIT_PER_ENTRY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_ENTRIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyGasUsed"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDailyGasUsage"
  ): TypedContractMethod<[date: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRemainingGasAllowance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetUserDailyGasUsage"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sponsorGameEntry"
  ): TypedContractMethod<
    [user: AddressLike, gameContract: AddressLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDailyGasLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePaymaster"
  ): TypedContractMethod<[newPaymaster: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUserDailyGasLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDailyGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userDailyGasUsed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DailyGasLimitUpdated"
  ): TypedContractEvent<
    DailyGasLimitUpdatedEvent.InputTuple,
    DailyGasLimitUpdatedEvent.OutputTuple,
    DailyGasLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GasSponsored"
  ): TypedContractEvent<
    GasSponsoredEvent.InputTuple,
    GasSponsoredEvent.OutputTuple,
    GasSponsoredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymasterUpdated"
  ): TypedContractEvent<
    PaymasterUpdatedEvent.InputTuple,
    PaymasterUpdatedEvent.OutputTuple,
    PaymasterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserGasLimitUpdated"
  ): TypedContractEvent<
    UserGasLimitUpdatedEvent.InputTuple,
    UserGasLimitUpdatedEvent.OutputTuple,
    UserGasLimitUpdatedEvent.OutputObject
  >;

  filters: {
    "DailyGasLimitUpdated(uint256,uint256)": TypedContractEvent<
      DailyGasLimitUpdatedEvent.InputTuple,
      DailyGasLimitUpdatedEvent.OutputTuple,
      DailyGasLimitUpdatedEvent.OutputObject
    >;
    DailyGasLimitUpdated: TypedContractEvent<
      DailyGasLimitUpdatedEvent.InputTuple,
      DailyGasLimitUpdatedEvent.OutputTuple,
      DailyGasLimitUpdatedEvent.OutputObject
    >;

    "GasSponsored(address,uint256,bytes32)": TypedContractEvent<
      GasSponsoredEvent.InputTuple,
      GasSponsoredEvent.OutputTuple,
      GasSponsoredEvent.OutputObject
    >;
    GasSponsored: TypedContractEvent<
      GasSponsoredEvent.InputTuple,
      GasSponsoredEvent.OutputTuple,
      GasSponsoredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymasterUpdated(address,address)": TypedContractEvent<
      PaymasterUpdatedEvent.InputTuple,
      PaymasterUpdatedEvent.OutputTuple,
      PaymasterUpdatedEvent.OutputObject
    >;
    PaymasterUpdated: TypedContractEvent<
      PaymasterUpdatedEvent.InputTuple,
      PaymasterUpdatedEvent.OutputTuple,
      PaymasterUpdatedEvent.OutputObject
    >;

    "UserGasLimitUpdated(address,uint256,uint256)": TypedContractEvent<
      UserGasLimitUpdatedEvent.InputTuple,
      UserGasLimitUpdatedEvent.OutputTuple,
      UserGasLimitUpdatedEvent.OutputObject
    >;
    UserGasLimitUpdated: TypedContractEvent<
      UserGasLimitUpdatedEvent.InputTuple,
      UserGasLimitUpdatedEvent.OutputTuple,
      UserGasLimitUpdatedEvent.OutputObject
    >;
  };
}
